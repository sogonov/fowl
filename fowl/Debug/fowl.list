
fowl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035ec  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003728  08003728  00013728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080037d4  080037d4  000137d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080037d8  080037d8  000137d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000004  080037dc  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000e8  20000010  080037e8  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000f8  080037e8  000200f8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b74c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001c69  00000000  00000000  0002b78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000010d0  00000000  00000000  0002d3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001008  00000000  00000000  0002e4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002075f  00000000  00000000  0002f4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000bacb  00000000  00000000  0004fc2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d14de  00000000  00000000  0005b6fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0012cbd8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004500  00000000  00000000  0012cc28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	08003710 	.word	0x08003710

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	08003710 	.word	0x08003710

0800017c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000188:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800018a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4313      	orrs	r3, r2
 8000192:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000198:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4013      	ands	r3, r2
 800019e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr

080001ae <cs_low_ads>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void cs_low_ads(){
 80001ae:	b580      	push	{r7, lr}
 80001b0:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, ADS_CS_Pin, GPIO_PIN_RESET); //CS установлен в ноль
 80001b2:	2200      	movs	r2, #0
 80001b4:	2110      	movs	r1, #16
 80001b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001ba:	f000 fdb1 	bl	8000d20 <HAL_GPIO_WritePin>
	  };
 80001be:	bf00      	nop
 80001c0:	bd80      	pop	{r7, pc}

080001c2 <cs_high_ads>:
static void cs_high_ads(){
 80001c2:	b580      	push	{r7, lr}
 80001c4:	af00      	add	r7, sp, #0
	 	  HAL_GPIO_WritePin(GPIOA, ADS_CS_Pin, GPIO_PIN_SET); //CS установлен в единицу
 80001c6:	2201      	movs	r2, #1
 80001c8:	2110      	movs	r1, #16
 80001ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001ce:	f000 fda7 	bl	8000d20 <HAL_GPIO_WritePin>
	 	  };
 80001d2:	bf00      	nop
 80001d4:	bd80      	pop	{r7, pc}
	...

080001d8 <ADS1293_read>:
	//передача двух байт, первый - адрес регистра,
	//второй - то, что хотим записать
	cs_high_ads();
	HAL_Delay(10);
};
static uint8_t ADS1293_read(uint8_t address){
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
	uint8_t command_field = address | ADS1293_READ_BIT;
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	73fb      	strb	r3, [r7, #15]
	uint8_t read_val;
	cs_low_ads();
 80001ec:	f7ff ffdf 	bl	80001ae <cs_low_ads>
	HAL_SPI_Transmit(&hspi1, &command_field, 1, 100);
 80001f0:	f107 010f 	add.w	r1, r7, #15
 80001f4:	2364      	movs	r3, #100	; 0x64
 80001f6:	2201      	movs	r2, #1
 80001f8:	4808      	ldr	r0, [pc, #32]	; (800021c <ADS1293_read+0x44>)
 80001fa:	f002 fbf0 	bl	80029de <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &read_val, 1, 100);
 80001fe:	f107 010e 	add.w	r1, r7, #14
 8000202:	2364      	movs	r3, #100	; 0x64
 8000204:	2201      	movs	r2, #1
 8000206:	4805      	ldr	r0, [pc, #20]	; (800021c <ADS1293_read+0x44>)
 8000208:	f002 fd57 	bl	8002cba <HAL_SPI_Receive>
	cs_high_ads();
 800020c:	f7ff ffd9 	bl	80001c2 <cs_high_ads>
	return read_val;
 8000210:	7bbb      	ldrb	r3, [r7, #14]
};
 8000212:	4618      	mov	r0, r3
 8000214:	3710      	adds	r7, #16
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	2000002c 	.word	0x2000002c

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 faa2 	bl	800076c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f80c 	bl	8000244 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800022c:	f000 f862 	bl	80002f4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 f8f8 	bl	8000424 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000234:	f000 f87c 	bl	8000330 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000238:	f000 f8b6 	bl	80003a8 <MX_SPI2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ADS1293_read(ADS1293_AFE_DITHER_EN_REG);
 800023c:	2016      	movs	r0, #22
 800023e:	f7ff ffcb 	bl	80001d8 <ADS1293_read>
 8000242:	e7fb      	b.n	800023c <main+0x1c>

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b09a      	sub	sp, #104	; 0x68
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0320 	add.w	r3, r7, #32
 800024e:	2248      	movs	r2, #72	; 0x48
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f003 fa54 	bl	8003700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]
 8000264:	611a      	str	r2, [r3, #16]
 8000266:	615a      	str	r2, [r3, #20]
 8000268:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800026a:	4b21      	ldr	r3, [pc, #132]	; (80002f0 <SystemClock_Config+0xac>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000272:	4a1f      	ldr	r2, [pc, #124]	; (80002f0 <SystemClock_Config+0xac>)
 8000274:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000278:	6013      	str	r3, [r2, #0]
 800027a:	4b1d      	ldr	r3, [pc, #116]	; (80002f0 <SystemClock_Config+0xac>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000282:	603b      	str	r3, [r7, #0]
 8000284:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000286:	2322      	movs	r3, #34	; 0x22
 8000288:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800028e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000290:	2301      	movs	r3, #1
 8000292:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000294:	2340      	movs	r3, #64	; 0x40
 8000296:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000298:	2300      	movs	r3, #0
 800029a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800029c:	2360      	movs	r3, #96	; 0x60
 800029e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a0:	2300      	movs	r3, #0
 80002a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a4:	f107 0320 	add.w	r3, r7, #32
 80002a8:	4618      	mov	r0, r3
 80002aa:	f001 f8cd 	bl	8001448 <HAL_RCC_OscConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002b4:	f000 f8c3 	bl	800043e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80002b8:	236f      	movs	r3, #111	; 0x6f
 80002ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002bc:	2300      	movs	r3, #0
 80002be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f001 fc43 	bl	8001b64 <HAL_RCC_ClockConfig>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80002e4:	f000 f8ab 	bl	800043e <Error_Handler>
  }
}
 80002e8:	bf00      	nop
 80002ea:	3768      	adds	r7, #104	; 0x68
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	58000400 	.word	0x58000400

080002f4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b094      	sub	sp, #80	; 0x50
 80002f8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80002fa:	463b      	mov	r3, r7
 80002fc:	2250      	movs	r2, #80	; 0x50
 80002fe:	2100      	movs	r1, #0
 8000300:	4618      	mov	r0, r3
 8000302:	f003 f9fd 	bl	8003700 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000306:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800030a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800030c:	2300      	movs	r3, #0
 800030e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000310:	2310      	movs	r3, #16
 8000312:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000314:	463b      	mov	r3, r7
 8000316:	4618      	mov	r0, r3
 8000318:	f002 f837 	bl	800238a <HAL_RCCEx_PeriphCLKConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000322:	f000 f88c 	bl	800043e <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000326:	bf00      	nop
 8000328:	3750      	adds	r7, #80	; 0x50
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000334:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <MX_SPI1_Init+0x70>)
 8000336:	4a1b      	ldr	r2, [pc, #108]	; (80003a4 <MX_SPI1_Init+0x74>)
 8000338:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800033a:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <MX_SPI1_Init+0x70>)
 800033c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000340:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000342:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <MX_SPI1_Init+0x70>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000348:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <MX_SPI1_Init+0x70>)
 800034a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800034e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000350:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <MX_SPI1_Init+0x70>)
 8000352:	2200      	movs	r2, #0
 8000354:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000356:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <MX_SPI1_Init+0x70>)
 8000358:	2200      	movs	r2, #0
 800035a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800035c:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <MX_SPI1_Init+0x70>)
 800035e:	2200      	movs	r2, #0
 8000360:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000362:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <MX_SPI1_Init+0x70>)
 8000364:	2200      	movs	r2, #0
 8000366:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000368:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <MX_SPI1_Init+0x70>)
 800036a:	2200      	movs	r2, #0
 800036c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800036e:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <MX_SPI1_Init+0x70>)
 8000370:	2200      	movs	r2, #0
 8000372:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000374:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <MX_SPI1_Init+0x70>)
 8000376:	2200      	movs	r2, #0
 8000378:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800037a:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <MX_SPI1_Init+0x70>)
 800037c:	2207      	movs	r2, #7
 800037e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000380:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <MX_SPI1_Init+0x70>)
 8000382:	2200      	movs	r2, #0
 8000384:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000386:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <MX_SPI1_Init+0x70>)
 8000388:	2208      	movs	r2, #8
 800038a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800038c:	4804      	ldr	r0, [pc, #16]	; (80003a0 <MX_SPI1_Init+0x70>)
 800038e:	f002 fa83 	bl	8002898 <HAL_SPI_Init>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 8000398:	f000 f851 	bl	800043e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	2000002c 	.word	0x2000002c
 80003a4:	40013000 	.word	0x40013000

080003a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80003ac:	4b1b      	ldr	r3, [pc, #108]	; (800041c <MX_SPI2_Init+0x74>)
 80003ae:	4a1c      	ldr	r2, [pc, #112]	; (8000420 <MX_SPI2_Init+0x78>)
 80003b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80003b2:	4b1a      	ldr	r3, [pc, #104]	; (800041c <MX_SPI2_Init+0x74>)
 80003b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80003ba:	4b18      	ldr	r3, [pc, #96]	; (800041c <MX_SPI2_Init+0x74>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80003c0:	4b16      	ldr	r3, [pc, #88]	; (800041c <MX_SPI2_Init+0x74>)
 80003c2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80003c6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003c8:	4b14      	ldr	r3, [pc, #80]	; (800041c <MX_SPI2_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ce:	4b13      	ldr	r3, [pc, #76]	; (800041c <MX_SPI2_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80003d4:	4b11      	ldr	r3, [pc, #68]	; (800041c <MX_SPI2_Init+0x74>)
 80003d6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80003da:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_SPI2_Init+0x74>)
 80003de:	2200      	movs	r2, #0
 80003e0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003e2:	4b0e      	ldr	r3, [pc, #56]	; (800041c <MX_SPI2_Init+0x74>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <MX_SPI2_Init+0x74>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <MX_SPI2_Init+0x74>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80003f4:	4b09      	ldr	r3, [pc, #36]	; (800041c <MX_SPI2_Init+0x74>)
 80003f6:	2207      	movs	r2, #7
 80003f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003fa:	4b08      	ldr	r3, [pc, #32]	; (800041c <MX_SPI2_Init+0x74>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <MX_SPI2_Init+0x74>)
 8000402:	2208      	movs	r2, #8
 8000404:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000406:	4805      	ldr	r0, [pc, #20]	; (800041c <MX_SPI2_Init+0x74>)
 8000408:	f002 fa46 	bl	8002898 <HAL_SPI_Init>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000412:	f000 f814 	bl	800043e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20000090 	.word	0x20000090
 8000420:	40003800 	.word	0x40003800

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000428:	2002      	movs	r0, #2
 800042a:	f7ff fea7 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800042e:	2004      	movs	r0, #4
 8000430:	f7ff fea4 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000434:	2001      	movs	r0, #1
 8000436:	f7ff fea1 	bl	800017c <LL_AHB2_GRP1_EnableClock>

}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}

0800043e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000442:	b672      	cpsid	i
}
 8000444:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000446:	e7fe      	b.n	8000446 <Error_Handler+0x8>

08000448 <LL_AHB2_GRP1_EnableClock>:
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000454:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000456:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4313      	orrs	r3, r2
 800045e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000464:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4013      	ands	r3, r2
 800046a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800046c:	68fb      	ldr	r3, [r7, #12]
}
 800046e:	bf00      	nop
 8000470:	3714      	adds	r7, #20
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr

0800047a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800047a:	b480      	push	{r7}
 800047c:	b085      	sub	sp, #20
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000486:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4313      	orrs	r3, r2
 8000490:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000496:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4013      	ands	r3, r2
 800049c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800049e:	68fb      	ldr	r3, [r7, #12]
}
 80004a0:	bf00      	nop
 80004a2:	3714      	adds	r7, #20
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80004b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80004ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4313      	orrs	r3, r2
 80004c2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80004c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4013      	ands	r3, r2
 80004ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d0:	68fb      	ldr	r3, [r7, #12]
}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f4:	f107 030c 	add.w	r3, r7, #12
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a3a      	ldr	r2, [pc, #232]	; (80005f4 <HAL_SPI_MspInit+0x108>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d118      	bne.n	8000540 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800050e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000512:	f7ff ffcb 	bl	80004ac <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	2001      	movs	r0, #1
 8000518:	f7ff ff96 	bl	8000448 <LL_AHB2_GRP1_EnableClock>
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|ADS_CS_Pin|GPIO_PIN_6|GPIO_PIN_7;
 800051c:	23d2      	movs	r3, #210	; 0xd2
 800051e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000520:	2302      	movs	r3, #2
 8000522:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	2300      	movs	r3, #0
 8000526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000528:	2300      	movs	r3, #0
 800052a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800052c:	2305      	movs	r3, #5
 800052e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	4619      	mov	r1, r3
 8000536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053a:	f000 fa81 	bl	8000a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800053e:	e054      	b.n	80005ea <HAL_SPI_MspInit+0xfe>
  else if(hspi->Instance==SPI2)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a2c      	ldr	r2, [pc, #176]	; (80005f8 <HAL_SPI_MspInit+0x10c>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d14f      	bne.n	80005ea <HAL_SPI_MspInit+0xfe>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800054a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800054e:	f7ff ff94 	bl	800047a <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	2002      	movs	r0, #2
 8000554:	f7ff ff78 	bl	8000448 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000558:	2004      	movs	r0, #4
 800055a:	f7ff ff75 	bl	8000448 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800055e:	2001      	movs	r0, #1
 8000560:	f7ff ff72 	bl	8000448 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8000564:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000568:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800056a:	2302      	movs	r3, #2
 800056c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000572:	2300      	movs	r3, #0
 8000574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000576:	2305      	movs	r3, #5
 8000578:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	4619      	mov	r1, r3
 8000580:	481e      	ldr	r0, [pc, #120]	; (80005fc <HAL_SPI_MspInit+0x110>)
 8000582:	f000 fa5d 	bl	8000a40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000586:	2302      	movs	r3, #2
 8000588:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058a:	2302      	movs	r3, #2
 800058c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000592:	2300      	movs	r3, #0
 8000594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8000596:	2303      	movs	r3, #3
 8000598:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	4619      	mov	r1, r3
 80005a0:	4817      	ldr	r0, [pc, #92]	; (8000600 <HAL_SPI_MspInit+0x114>)
 80005a2:	f000 fa4d 	bl	8000a40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005a6:	2304      	movs	r3, #4
 80005a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005aa:	2302      	movs	r3, #2
 80005ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005b6:	2305      	movs	r3, #5
 80005b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	4619      	mov	r1, r3
 80005c0:	480f      	ldr	r0, [pc, #60]	; (8000600 <HAL_SPI_MspInit+0x114>)
 80005c2:	f000 fa3d 	bl	8000a40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005cc:	2302      	movs	r3, #2
 80005ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005d8:	2305      	movs	r3, #5
 80005da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	4619      	mov	r1, r3
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e6:	f000 fa2b 	bl	8000a40 <HAL_GPIO_Init>
}
 80005ea:	bf00      	nop
 80005ec:	3720      	adds	r7, #32
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40013000 	.word	0x40013000
 80005f8:	40003800 	.word	0x40003800
 80005fc:	48000400 	.word	0x48000400
 8000600:	48000800 	.word	0x48000800

08000604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <NMI_Handler+0x4>

0800060a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800060e:	e7fe      	b.n	800060e <HardFault_Handler+0x4>

08000610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <MemManage_Handler+0x4>

08000616 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800061a:	e7fe      	b.n	800061a <BusFault_Handler+0x4>

0800061c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <UsageFault_Handler+0x4>

08000622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000650:	f000 f8e6 	bl	8000820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}

08000658 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800065c:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <SystemInit+0x98>)
 800065e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000662:	4a23      	ldr	r2, [pc, #140]	; (80006f0 <SystemInit+0x98>)
 8000664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800066c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800067c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000680:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000684:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000690:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <SystemInit+0x9c>)
 8000692:	4013      	ands	r3, r2
 8000694:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800069a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800069e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006a2:	f023 0305 	bic.w	r3, r3, #5
 80006a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80006aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80006b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006b6:	f023 0301 	bic.w	r3, r3, #1
 80006ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80006be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006c2:	4a0d      	ldr	r2, [pc, #52]	; (80006f8 <SystemInit+0xa0>)
 80006c4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80006c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006ca:	4a0b      	ldr	r2, [pc, #44]	; (80006f8 <SystemInit+0xa0>)
 80006cc:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006e2:	2200      	movs	r2, #0
 80006e4:	619a      	str	r2, [r3, #24]
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	e000ed00 	.word	0xe000ed00
 80006f4:	faf6fefb 	.word	0xfaf6fefb
 80006f8:	22041000 	.word	0x22041000

080006fc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80006fc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006fe:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000700:	3304      	adds	r3, #4

08000702 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000702:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000704:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000706:	d3f9      	bcc.n	80006fc <CopyDataInit>
  bx lr
 8000708:	4770      	bx	lr

0800070a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800070a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800070c:	3004      	adds	r0, #4

0800070e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800070e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000710:	d3fb      	bcc.n	800070a <FillZerobss>
  bx lr
 8000712:	4770      	bx	lr

08000714 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000714:	480c      	ldr	r0, [pc, #48]	; (8000748 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000716:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000718:	f7ff ff9e 	bl	8000658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800071c:	480b      	ldr	r0, [pc, #44]	; (800074c <LoopForever+0x8>)
 800071e:	490c      	ldr	r1, [pc, #48]	; (8000750 <LoopForever+0xc>)
 8000720:	4a0c      	ldr	r2, [pc, #48]	; (8000754 <LoopForever+0x10>)
 8000722:	2300      	movs	r3, #0
 8000724:	f7ff ffed 	bl	8000702 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <LoopForever+0x14>)
 800072a:	490c      	ldr	r1, [pc, #48]	; (800075c <LoopForever+0x18>)
 800072c:	2300      	movs	r3, #0
 800072e:	f7ff ffee 	bl	800070e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000732:	480b      	ldr	r0, [pc, #44]	; (8000760 <LoopForever+0x1c>)
 8000734:	490b      	ldr	r1, [pc, #44]	; (8000764 <LoopForever+0x20>)
 8000736:	2300      	movs	r3, #0
 8000738:	f7ff ffe9 	bl	800070e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800073c:	f002 ffbc 	bl	80036b8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000740:	f7ff fd6e 	bl	8000220 <main>

08000744 <LoopForever>:

LoopForever:
  b LoopForever
 8000744:	e7fe      	b.n	8000744 <LoopForever>
 8000746:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000748:	20010000 	.word	0x20010000
  INIT_DATA _sdata, _edata, _sidata
 800074c:	20000004 	.word	0x20000004
 8000750:	20000010 	.word	0x20000010
 8000754:	080037dc 	.word	0x080037dc
  INIT_BSS _sbss, _ebss
 8000758:	20000010 	.word	0x20000010
 800075c:	200000f8 	.word	0x200000f8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000760:	20030000 	.word	0x20030000
 8000764:	20030000 	.word	0x20030000

08000768 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000768:	e7fe      	b.n	8000768 <ADC1_IRQHandler>
	...

0800076c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000772:	2300      	movs	r3, #0
 8000774:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <HAL_Init+0x3c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a0b      	ldr	r2, [pc, #44]	; (80007a8 <HAL_Init+0x3c>)
 800077c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000780:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000782:	2003      	movs	r0, #3
 8000784:	f000 f92a 	bl	80009dc <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000788:	200f      	movs	r0, #15
 800078a:	f000 f80f 	bl	80007ac <HAL_InitTick>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d002      	beq.n	800079a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000794:	2301      	movs	r3, #1
 8000796:	71fb      	strb	r3, [r7, #7]
 8000798:	e001      	b.n	800079e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800079a:	f7ff fea0 	bl	80004de <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800079e:	79fb      	ldrb	r3, [r7, #7]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	58004000 	.word	0x58004000

080007ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007b4:	2300      	movs	r3, #0
 80007b6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <HAL_InitTick+0x6c>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d024      	beq.n	800080a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007c0:	f001 fb7e 	bl	8001ec0 <HAL_RCC_GetHCLKFreq>
 80007c4:	4602      	mov	r2, r0
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <HAL_InitTick+0x6c>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	4619      	mov	r1, r3
 80007cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80007d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 f924 	bl	8000a26 <HAL_SYSTICK_Config>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d10f      	bne.n	8000804 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b0f      	cmp	r3, #15
 80007e8:	d809      	bhi.n	80007fe <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ea:	2200      	movs	r2, #0
 80007ec:	6879      	ldr	r1, [r7, #4]
 80007ee:	f04f 30ff 	mov.w	r0, #4294967295
 80007f2:	f000 f8fe 	bl	80009f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007f6:	4a09      	ldr	r2, [pc, #36]	; (800081c <HAL_InitTick+0x70>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	e007      	b.n	800080e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	73fb      	strb	r3, [r7, #15]
 8000802:	e004      	b.n	800080e <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000804:	2301      	movs	r3, #1
 8000806:	73fb      	strb	r3, [r7, #15]
 8000808:	e001      	b.n	800080e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800080e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000810:	4618      	mov	r0, r3
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	2000000c 	.word	0x2000000c
 800081c:	20000008 	.word	0x20000008

08000820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_IncTick+0x20>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_IncTick+0x24>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4413      	add	r3, r2
 8000830:	4a04      	ldr	r2, [pc, #16]	; (8000844 <HAL_IncTick+0x24>)
 8000832:	6013      	str	r3, [r2, #0]
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	2000000c 	.word	0x2000000c
 8000844:	200000f4 	.word	0x200000f4

08000848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return uwTick;
 800084c:	4b03      	ldr	r3, [pc, #12]	; (800085c <HAL_GetTick+0x14>)
 800084e:	681b      	ldr	r3, [r3, #0]
}
 8000850:	4618      	mov	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	200000f4 	.word	0x200000f4

08000860 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000864:	4b03      	ldr	r3, [pc, #12]	; (8000874 <HAL_GetTickPrio+0x14>)
 8000866:	681b      	ldr	r3, [r3, #0]
}
 8000868:	4618      	mov	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	20000008 	.word	0x20000008

08000878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <__NVIC_SetPriorityGrouping+0x44>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000894:	4013      	ands	r3, r2
 8000896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008aa:	4a04      	ldr	r2, [pc, #16]	; (80008bc <__NVIC_SetPriorityGrouping+0x44>)
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	60d3      	str	r3, [r2, #12]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <__NVIC_GetPriorityGrouping+0x18>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	0a1b      	lsrs	r3, r3, #8
 80008ca:	f003 0307 	and.w	r3, r3, #7
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	6039      	str	r1, [r7, #0]
 80008e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	db0a      	blt.n	8000906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	490c      	ldr	r1, [pc, #48]	; (8000928 <__NVIC_SetPriority+0x4c>)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	0112      	lsls	r2, r2, #4
 80008fc:	b2d2      	uxtb	r2, r2
 80008fe:	440b      	add	r3, r1
 8000900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000904:	e00a      	b.n	800091c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4908      	ldr	r1, [pc, #32]	; (800092c <__NVIC_SetPriority+0x50>)
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	f003 030f 	and.w	r3, r3, #15
 8000912:	3b04      	subs	r3, #4
 8000914:	0112      	lsls	r2, r2, #4
 8000916:	b2d2      	uxtb	r2, r2
 8000918:	440b      	add	r3, r1
 800091a:	761a      	strb	r2, [r3, #24]
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	e000e100 	.word	0xe000e100
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000930:	b480      	push	{r7}
 8000932:	b089      	sub	sp, #36	; 0x24
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f003 0307 	and.w	r3, r3, #7
 8000942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	f1c3 0307 	rsb	r3, r3, #7
 800094a:	2b04      	cmp	r3, #4
 800094c:	bf28      	it	cs
 800094e:	2304      	movcs	r3, #4
 8000950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	3304      	adds	r3, #4
 8000956:	2b06      	cmp	r3, #6
 8000958:	d902      	bls.n	8000960 <NVIC_EncodePriority+0x30>
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	3b03      	subs	r3, #3
 800095e:	e000      	b.n	8000962 <NVIC_EncodePriority+0x32>
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000964:	f04f 32ff 	mov.w	r2, #4294967295
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43da      	mvns	r2, r3
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	401a      	ands	r2, r3
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000978:	f04f 31ff 	mov.w	r1, #4294967295
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	fa01 f303 	lsl.w	r3, r1, r3
 8000982:	43d9      	mvns	r1, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000988:	4313      	orrs	r3, r2
         );
}
 800098a:	4618      	mov	r0, r3
 800098c:	3724      	adds	r7, #36	; 0x24
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
	...

08000998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009a8:	d301      	bcc.n	80009ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009aa:	2301      	movs	r3, #1
 80009ac:	e00f      	b.n	80009ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ae:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <SysTick_Config+0x40>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009b6:	210f      	movs	r1, #15
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	f7ff ff8e 	bl	80008dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <SysTick_Config+0x40>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c6:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <SysTick_Config+0x40>)
 80009c8:	2207      	movs	r2, #7
 80009ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	e000e010 	.word	0xe000e010

080009dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff ff47 	bl	8000878 <__NVIC_SetPriorityGrouping>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b086      	sub	sp, #24
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	4603      	mov	r3, r0
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
 80009fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a00:	f7ff ff5e 	bl	80008c0 <__NVIC_GetPriorityGrouping>
 8000a04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	68b9      	ldr	r1, [r7, #8]
 8000a0a:	6978      	ldr	r0, [r7, #20]
 8000a0c:	f7ff ff90 	bl	8000930 <NVIC_EncodePriority>
 8000a10:	4602      	mov	r2, r0
 8000a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a16:	4611      	mov	r1, r2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff5f 	bl	80008dc <__NVIC_SetPriority>
}
 8000a1e:	bf00      	nop
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff ffb2 	bl	8000998 <SysTick_Config>
 8000a34:	4603      	mov	r3, r0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b087      	sub	sp, #28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a4e:	e14c      	b.n	8000cea <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	2101      	movs	r1, #1
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	f000 813e 	beq.w	8000ce4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f003 0303 	and.w	r3, r3, #3
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d005      	beq.n	8000a80 <HAL_GPIO_Init+0x40>
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f003 0303 	and.w	r3, r3, #3
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d130      	bne.n	8000ae2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	68da      	ldr	r2, [r3, #12]
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	091b      	lsrs	r3, r3, #4
 8000acc:	f003 0201 	and.w	r2, r3, #1
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f003 0303 	and.w	r3, r3, #3
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	d017      	beq.n	8000b1e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	2203      	movs	r2, #3
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	43db      	mvns	r3, r3
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4013      	ands	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f003 0303 	and.w	r3, r3, #3
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d123      	bne.n	8000b72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	08da      	lsrs	r2, r3, #3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3208      	adds	r2, #8
 8000b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	220f      	movs	r2, #15
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43db      	mvns	r3, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	691a      	ldr	r2, [r3, #16]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	f003 0307 	and.w	r3, r3, #7
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	08da      	lsrs	r2, r3, #3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3208      	adds	r2, #8
 8000b6c:	6939      	ldr	r1, [r7, #16]
 8000b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4013      	ands	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f003 0203 	and.w	r2, r3, #3
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f000 8098 	beq.w	8000ce4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000bb4:	4a54      	ldr	r2, [pc, #336]	; (8000d08 <HAL_GPIO_Init+0x2c8>)
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	089b      	lsrs	r3, r3, #2
 8000bba:	3302      	adds	r3, #2
 8000bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	f003 0303 	and.w	r3, r3, #3
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	220f      	movs	r2, #15
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bde:	d019      	beq.n	8000c14 <HAL_GPIO_Init+0x1d4>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a4a      	ldr	r2, [pc, #296]	; (8000d0c <HAL_GPIO_Init+0x2cc>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d013      	beq.n	8000c10 <HAL_GPIO_Init+0x1d0>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a49      	ldr	r2, [pc, #292]	; (8000d10 <HAL_GPIO_Init+0x2d0>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d00d      	beq.n	8000c0c <HAL_GPIO_Init+0x1cc>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a48      	ldr	r2, [pc, #288]	; (8000d14 <HAL_GPIO_Init+0x2d4>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d007      	beq.n	8000c08 <HAL_GPIO_Init+0x1c8>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a47      	ldr	r2, [pc, #284]	; (8000d18 <HAL_GPIO_Init+0x2d8>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d101      	bne.n	8000c04 <HAL_GPIO_Init+0x1c4>
 8000c00:	2304      	movs	r3, #4
 8000c02:	e008      	b.n	8000c16 <HAL_GPIO_Init+0x1d6>
 8000c04:	2307      	movs	r3, #7
 8000c06:	e006      	b.n	8000c16 <HAL_GPIO_Init+0x1d6>
 8000c08:	2303      	movs	r3, #3
 8000c0a:	e004      	b.n	8000c16 <HAL_GPIO_Init+0x1d6>
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	e002      	b.n	8000c16 <HAL_GPIO_Init+0x1d6>
 8000c10:	2301      	movs	r3, #1
 8000c12:	e000      	b.n	8000c16 <HAL_GPIO_Init+0x1d6>
 8000c14:	2300      	movs	r3, #0
 8000c16:	697a      	ldr	r2, [r7, #20]
 8000c18:	f002 0203 	and.w	r2, r2, #3
 8000c1c:	0092      	lsls	r2, r2, #2
 8000c1e:	4093      	lsls	r3, r2
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c26:	4938      	ldr	r1, [pc, #224]	; (8000d08 <HAL_GPIO_Init+0x2c8>)
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	089b      	lsrs	r3, r3, #2
 8000c2c:	3302      	adds	r3, #2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c34:	4b39      	ldr	r3, [pc, #228]	; (8000d1c <HAL_GPIO_Init+0x2dc>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4013      	ands	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d003      	beq.n	8000c58 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c58:	4a30      	ldr	r2, [pc, #192]	; (8000d1c <HAL_GPIO_Init+0x2dc>)
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	; (8000d1c <HAL_GPIO_Init+0x2dc>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	43db      	mvns	r3, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d003      	beq.n	8000c82 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c82:	4a26      	ldr	r2, [pc, #152]	; (8000d1c <HAL_GPIO_Init+0x2dc>)
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c88:	4b24      	ldr	r3, [pc, #144]	; (8000d1c <HAL_GPIO_Init+0x2dc>)
 8000c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	43db      	mvns	r3, r3
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4013      	ands	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cae:	4a1b      	ldr	r2, [pc, #108]	; (8000d1c <HAL_GPIO_Init+0x2dc>)
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <HAL_GPIO_Init+0x2dc>)
 8000cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d003      	beq.n	8000cdc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cdc:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <HAL_GPIO_Init+0x2dc>)
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f47f aeab 	bne.w	8000a50 <HAL_GPIO_Init+0x10>
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	bf00      	nop
 8000cfe:	371c      	adds	r7, #28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	40010000 	.word	0x40010000
 8000d0c:	48000400 	.word	0x48000400
 8000d10:	48000800 	.word	0x48000800
 8000d14:	48000c00 	.word	0x48000c00
 8000d18:	48001000 	.word	0x48001000
 8000d1c:	58000800 	.word	0x58000800

08000d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	807b      	strh	r3, [r7, #2]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d30:	787b      	ldrb	r3, [r7, #1]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d003      	beq.n	8000d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d36:	887a      	ldrh	r2, [r7, #2]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d3c:	e002      	b.n	8000d44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d3e:	887a      	ldrh	r2, [r7, #2]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d5e:	6013      	str	r3, [r2, #0]
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	58000400 	.word	0x58000400

08000d70 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	58000400 	.word	0x58000400

08000d8c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000d9e:	d101      	bne.n	8000da4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000da0:	2301      	movs	r3, #1
 8000da2:	e000      	b.n	8000da6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de0:	6013      	str	r3, [r2, #0]
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000dfe:	d101      	bne.n	8000e04 <LL_RCC_HSE_IsReady+0x18>
 8000e00:	2301      	movs	r3, #1
 8000e02:	e000      	b.n	8000e06 <LL_RCC_HSE_IsReady+0x1a>
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e22:	6013      	str	r3, [r2, #0]
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e40:	6013      	str	r3, [r2, #0]
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e5e:	d101      	bne.n	8000e64 <LL_RCC_HSI_IsReady+0x18>
 8000e60:	2301      	movs	r3, #1
 8000e62:	e000      	b.n	8000e66 <LL_RCC_HSI_IsReady+0x1a>
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	061b      	lsls	r3, r3, #24
 8000e86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	604b      	str	r3, [r1, #4]
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ea6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ec8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ecc:	f023 0301 	bic.w	r3, r3, #1
 8000ed0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8000ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d101      	bne.n	8000ef6 <LL_RCC_HSI48_IsReady+0x18>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e000      	b.n	8000ef8 <LL_RCC_HSI48_IsReady+0x1a>
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f34:	f023 0301 	bic.w	r3, r3, #1
 8000f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f56:	f043 0304 	orr.w	r3, r3, #4
 8000f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f78:	f023 0304 	bic.w	r3, r3, #4
 8000f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d101      	bne.n	8000fa2 <LL_RCC_LSE_IsReady+0x18>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <LL_RCC_LSE_IsReady+0x1a>
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fe0:	f023 0301 	bic.w	r3, r3, #1
 8000fe4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8000ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	2b02      	cmp	r3, #2
 8001004:	d101      	bne.n	800100a <LL_RCC_LSI1_IsReady+0x18>
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <LL_RCC_LSI1_IsReady+0x1a>
 800100a:	2300      	movs	r3, #0
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800101a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800101e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001022:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001026:	f043 0304 	orr.w	r3, r3, #4
 800102a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800103c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001040:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001044:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001048:	f023 0304 	bic.w	r3, r3, #4
 800104c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800105e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	2b08      	cmp	r3, #8
 800106c:	d101      	bne.n	8001072 <LL_RCC_LSI2_IsReady+0x18>
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <LL_RCC_LSI2_IsReady+0x1a>
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800108a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800108e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800109a:	4313      	orrs	r3, r2
 800109c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80010b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6013      	str	r3, [r2, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80010ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010d8:	f023 0301 	bic.w	r3, r3, #1
 80010dc:	6013      	str	r3, [r2, #0]
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80010ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d101      	bne.n	80010fe <LL_RCC_MSI_IsReady+0x16>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <LL_RCC_MSI_IsReady+0x18>
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800111c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4313      	orrs	r3, r2
 8001124:	600b      	str	r3, [r1, #0]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001142:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2bb0      	cmp	r3, #176	; 0xb0
 8001148:	d901      	bls.n	800114e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800114a:	23b0      	movs	r3, #176	; 0xb0
 800114c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800114e:	687b      	ldr	r3, [r7, #4]
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001176:	4313      	orrs	r3, r2
 8001178:	604b      	str	r3, [r1, #4]
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800118e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f023 0203 	bic.w	r2, r3, #3
 8001198:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4313      	orrs	r3, r2
 80011a0:	608b      	str	r3, [r1, #8]
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80011b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f003 030c 	and.w	r3, r3, #12
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80011ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4313      	orrs	r3, r2
 80011e0:	608b      	str	r3, [r1, #8]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80011f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80011fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001202:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4313      	orrs	r3, r2
 800120a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001226:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800122a:	f023 020f 	bic.w	r2, r3, #15
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001236:	4313      	orrs	r3, r2
 8001238:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800125a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4313      	orrs	r3, r2
 8001262:	608b      	str	r3, [r1, #8]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001282:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4313      	orrs	r3, r2
 800128a:	608b      	str	r3, [r1, #8]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800129c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80012b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80012bc:	011b      	lsls	r3, r3, #4
 80012be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80012d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80012ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012fc:	6013      	str	r3, [r2, #0]
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800130c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001316:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800131a:	d101      	bne.n	8001320 <LL_RCC_PLL_IsReady+0x18>
 800131c:	2301      	movs	r3, #1
 800131e:	e000      	b.n	8001322 <LL_RCC_PLL_IsReady+0x1a>
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	0a1b      	lsrs	r3, r3, #8
 8001338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800134a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800137a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	f003 0303 	and.w	r3, r3, #3
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a0:	d101      	bne.n	80013a6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80013b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013c6:	d101      	bne.n	80013cc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80013c8:	2301      	movs	r3, #1
 80013ca:	e000      	b.n	80013ce <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80013dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80013e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ec:	d101      	bne.n	80013f2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001410:	d101      	bne.n	8001416 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001430:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001434:	d101      	bne.n	800143a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b08d      	sub	sp, #52	; 0x34
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e37f      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0320 	and.w	r3, r3, #32
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 8092 	beq.w	800158c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001468:	f7ff fea1 	bl	80011ae <LL_RCC_GetSysClkSource>
 800146c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800146e:	f7ff ff82 	bl	8001376 <LL_RCC_PLL_GetMainSource>
 8001472:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001476:	2b00      	cmp	r3, #0
 8001478:	d005      	beq.n	8001486 <HAL_RCC_OscConfig+0x3e>
 800147a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147c:	2b0c      	cmp	r3, #12
 800147e:	d14c      	bne.n	800151a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001482:	2b01      	cmp	r3, #1
 8001484:	d149      	bne.n	800151a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001486:	f7ff fe2f 	bl	80010e8 <LL_RCC_MSI_IsReady>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_RCC_OscConfig+0x54>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e35e      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80014a0:	f7ff fe47 	bl	8001132 <LL_RCC_MSI_GetRange>
 80014a4:	4603      	mov	r3, r0
 80014a6:	429c      	cmp	r4, r3
 80014a8:	d914      	bls.n	80014d4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 fd1a 	bl	8001ee8 <RCC_SetFlashLatencyFromMSIRange>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e34d      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fe21 	bl	800110a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fe45 	bl	800115c <LL_RCC_MSI_SetCalibTrimming>
 80014d2:	e013      	b.n	80014fc <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fe16 	bl	800110a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fe3a 	bl	800115c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 fcfb 	bl	8001ee8 <RCC_SetFlashLatencyFromMSIRange>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e32e      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80014fc:	f000 fce0 	bl	8001ec0 <HAL_RCC_GetHCLKFreq>
 8001500:	4603      	mov	r3, r0
 8001502:	4aa5      	ldr	r2, [pc, #660]	; (8001798 <HAL_RCC_OscConfig+0x350>)
 8001504:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001506:	4ba5      	ldr	r3, [pc, #660]	; (800179c <HAL_RCC_OscConfig+0x354>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f94e 	bl	80007ac <HAL_InitTick>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d039      	beq.n	800158a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e31f      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d01e      	beq.n	8001560 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001522:	f7ff fdc3 	bl	80010ac <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001526:	f7ff f98f 	bl	8000848 <HAL_GetTick>
 800152a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800152e:	f7ff f98b 	bl	8000848 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e30c      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001540:	f7ff fdd2 	bl	80010e8 <LL_RCC_MSI_IsReady>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f1      	beq.n	800152e <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fddb 	bl	800110a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fdff 	bl	800115c <LL_RCC_MSI_SetCalibTrimming>
 800155e:	e015      	b.n	800158c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001560:	f7ff fdb3 	bl	80010ca <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001564:	f7ff f970 	bl	8000848 <HAL_GetTick>
 8001568:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800156c:	f7ff f96c 	bl	8000848 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e2ed      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() != 0U)
 800157e:	f7ff fdb3 	bl	80010e8 <LL_RCC_MSI_IsReady>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1f1      	bne.n	800156c <HAL_RCC_OscConfig+0x124>
 8001588:	e000      	b.n	800158c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800158a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d04e      	beq.n	8001636 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001598:	f7ff fe09 	bl	80011ae <LL_RCC_GetSysClkSource>
 800159c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800159e:	f7ff feea 	bl	8001376 <LL_RCC_PLL_GetMainSource>
 80015a2:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d005      	beq.n	80015b6 <HAL_RCC_OscConfig+0x16e>
 80015aa:	6a3b      	ldr	r3, [r7, #32]
 80015ac:	2b0c      	cmp	r3, #12
 80015ae:	d10d      	bne.n	80015cc <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d10a      	bne.n	80015cc <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b6:	f7ff fc19 	bl	8000dec <LL_RCC_HSE_IsReady>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d039      	beq.n	8001634 <HAL_RCC_OscConfig+0x1ec>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d135      	bne.n	8001634 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e2c6      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d4:	d102      	bne.n	80015dc <HAL_RCC_OscConfig+0x194>
 80015d6:	f7ff fbeb 	bl	8000db0 <LL_RCC_HSE_Enable>
 80015da:	e001      	b.n	80015e0 <HAL_RCC_OscConfig+0x198>
 80015dc:	f7ff fbf7 	bl	8000dce <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d012      	beq.n	800160e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e8:	f7ff f92e 	bl	8000848 <HAL_GetTick>
 80015ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f0:	f7ff f92a 	bl	8000848 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b64      	cmp	r3, #100	; 0x64
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e2ab      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001602:	f7ff fbf3 	bl	8000dec <LL_RCC_HSE_IsReady>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f1      	beq.n	80015f0 <HAL_RCC_OscConfig+0x1a8>
 800160c:	e013      	b.n	8001636 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160e:	f7ff f91b 	bl	8000848 <HAL_GetTick>
 8001612:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001616:	f7ff f917 	bl	8000848 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b64      	cmp	r3, #100	; 0x64
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e298      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001628:	f7ff fbe0 	bl	8000dec <LL_RCC_HSE_IsReady>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f1      	bne.n	8001616 <HAL_RCC_OscConfig+0x1ce>
 8001632:	e000      	b.n	8001636 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001634:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d051      	beq.n	80016e6 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001642:	f7ff fdb4 	bl	80011ae <LL_RCC_GetSysClkSource>
 8001646:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001648:	f7ff fe95 	bl	8001376 <LL_RCC_PLL_GetMainSource>
 800164c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	2b04      	cmp	r3, #4
 8001652:	d005      	beq.n	8001660 <HAL_RCC_OscConfig+0x218>
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	2b0c      	cmp	r3, #12
 8001658:	d113      	bne.n	8001682 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	2b02      	cmp	r3, #2
 800165e:	d110      	bne.n	8001682 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001660:	f7ff fbf4 	bl	8000e4c <LL_RCC_HSI_IsReady>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d005      	beq.n	8001676 <HAL_RCC_OscConfig+0x22e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e271      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fbf8 	bl	8000e70 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001680:	e031      	b.n	80016e6 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d019      	beq.n	80016be <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800168a:	f7ff fbc1 	bl	8000e10 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168e:	f7ff f8db 	bl	8000848 <HAL_GetTick>
 8001692:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001696:	f7ff f8d7 	bl	8000848 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e258      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() == 0U)
 80016a8:	f7ff fbd0 	bl	8000e4c <LL_RCC_HSI_IsReady>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f1      	beq.n	8001696 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fbda 	bl	8000e70 <LL_RCC_HSI_SetCalibTrimming>
 80016bc:	e013      	b.n	80016e6 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016be:	f7ff fbb6 	bl	8000e2e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c2:	f7ff f8c1 	bl	8000848 <HAL_GetTick>
 80016c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ca:	f7ff f8bd 	bl	8000848 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e23e      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() != 0U)
 80016dc:	f7ff fbb6 	bl	8000e4c <LL_RCC_HSI_IsReady>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f1      	bne.n	80016ca <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d106      	bne.n	8001700 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 80a4 	beq.w	8001848 <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d077      	beq.n	80017f8 <HAL_RCC_OscConfig+0x3b0>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	2b00      	cmp	r3, #0
 8001712:	d04b      	beq.n	80017ac <HAL_RCC_OscConfig+0x364>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001714:	f7ff fc6d 	bl	8000ff2 <LL_RCC_LSI1_IsReady>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d113      	bne.n	8001746 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800171e:	f7ff fc46 	bl	8000fae <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001722:	f7ff f891 	bl	8000848 <HAL_GetTick>
 8001726:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800172a:	f7ff f88d 	bl	8000848 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e20e      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800173c:	f7ff fc59 	bl	8000ff2 <LL_RCC_LSI1_IsReady>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f1      	beq.n	800172a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001746:	f7ff fc66 	bl	8001016 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174a:	f7ff f87d 	bl	8000848 <HAL_GetTick>
 800174e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001752:	f7ff f879 	bl	8000848 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b03      	cmp	r3, #3
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e1fa      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001764:	f7ff fc79 	bl	800105a <LL_RCC_LSI2_IsReady>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0f1      	beq.n	8001752 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fc83 	bl	800107e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001778:	f7ff fc2a 	bl	8000fd0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177c:	f7ff f864 	bl	8000848 <HAL_GetTick>
 8001780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001782:	e00d      	b.n	80017a0 <HAL_RCC_OscConfig+0x358>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001784:	f7ff f860 	bl	8000848 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d906      	bls.n	80017a0 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e1e1      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
 8001796:	bf00      	nop
 8001798:	20000004 	.word	0x20000004
 800179c:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() != 0U)
 80017a0:	f7ff fc27 	bl	8000ff2 <LL_RCC_LSI1_IsReady>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1ec      	bne.n	8001784 <HAL_RCC_OscConfig+0x33c>
 80017aa:	e04d      	b.n	8001848 <HAL_RCC_OscConfig+0x400>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80017ac:	f7ff fbff 	bl	8000fae <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b0:	f7ff f84a 	bl	8000848 <HAL_GetTick>
 80017b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x382>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80017b8:	f7ff f846 	bl	8000848 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e1c7      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80017ca:	f7ff fc12 	bl	8000ff2 <LL_RCC_LSI1_IsReady>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0f1      	beq.n	80017b8 <HAL_RCC_OscConfig+0x370>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80017d4:	f7ff fc30 	bl	8001038 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x3a4>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80017da:	f7ff f835 	bl	8000848 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b03      	cmp	r3, #3
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e1b6      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80017ec:	f7ff fc35 	bl	800105a <LL_RCC_LSI2_IsReady>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f1      	bne.n	80017da <HAL_RCC_OscConfig+0x392>
 80017f6:	e027      	b.n	8001848 <HAL_RCC_OscConfig+0x400>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80017f8:	f7ff fc1e 	bl	8001038 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fc:	f7ff f824 	bl	8000848 <HAL_GetTick>
 8001800:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x3ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001804:	f7ff f820 	bl	8000848 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b03      	cmp	r3, #3
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e1a1      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001816:	f7ff fc20 	bl	800105a <LL_RCC_LSI2_IsReady>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1f1      	bne.n	8001804 <HAL_RCC_OscConfig+0x3bc>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001820:	f7ff fbd6 	bl	8000fd0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001824:	f7ff f810 	bl	8000848 <HAL_GetTick>
 8001828:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x3f6>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800182c:	f7ff f80c 	bl	8000848 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e18d      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800183e:	f7ff fbd8 	bl	8000ff2 <LL_RCC_LSI1_IsReady>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1f1      	bne.n	800182c <HAL_RCC_OscConfig+0x3e4>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d05b      	beq.n	800190c <HAL_RCC_OscConfig+0x4c4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001854:	4ba7      	ldr	r3, [pc, #668]	; (8001af4 <HAL_RCC_OscConfig+0x6ac>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185c:	2b00      	cmp	r3, #0
 800185e:	d114      	bne.n	800188a <HAL_RCC_OscConfig+0x442>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001860:	f7ff fa76 	bl	8000d50 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001864:	f7fe fff0 	bl	8000848 <HAL_GetTick>
 8001868:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x436>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186c:	f7fe ffec 	bl	8000848 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e16d      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800187e:	4b9d      	ldr	r3, [pc, #628]	; (8001af4 <HAL_RCC_OscConfig+0x6ac>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0x424>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d102      	bne.n	8001898 <HAL_RCC_OscConfig+0x450>
 8001892:	f7ff fb36 	bl	8000f02 <LL_RCC_LSE_Enable>
 8001896:	e00c      	b.n	80018b2 <HAL_RCC_OscConfig+0x46a>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b05      	cmp	r3, #5
 800189e:	d104      	bne.n	80018aa <HAL_RCC_OscConfig+0x462>
 80018a0:	f7ff fb51 	bl	8000f46 <LL_RCC_LSE_EnableBypass>
 80018a4:	f7ff fb2d 	bl	8000f02 <LL_RCC_LSE_Enable>
 80018a8:	e003      	b.n	80018b2 <HAL_RCC_OscConfig+0x46a>
 80018aa:	f7ff fb3b 	bl	8000f24 <LL_RCC_LSE_Disable>
 80018ae:	f7ff fb5b 	bl	8000f68 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d014      	beq.n	80018e4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ba:	f7fe ffc5 	bl	8000848 <HAL_GetTick>
 80018be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80018c0:	e00a      	b.n	80018d8 <HAL_RCC_OscConfig+0x490>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c2:	f7fe ffc1 	bl	8000848 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e140      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() == 0U)
 80018d8:	f7ff fb57 	bl	8000f8a <LL_RCC_LSE_IsReady>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0ef      	beq.n	80018c2 <HAL_RCC_OscConfig+0x47a>
 80018e2:	e013      	b.n	800190c <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e4:	f7fe ffb0 	bl	8000848 <HAL_GetTick>
 80018e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80018ea:	e00a      	b.n	8001902 <HAL_RCC_OscConfig+0x4ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ec:	f7fe ffac 	bl	8000848 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e12b      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001902:	f7ff fb42 	bl	8000f8a <LL_RCC_LSE_IsReady>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1ef      	bne.n	80018ec <HAL_RCC_OscConfig+0x4a4>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001914:	2b00      	cmp	r3, #0
 8001916:	d02c      	beq.n	8001972 <HAL_RCC_OscConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191c:	2b00      	cmp	r3, #0
 800191e:	d014      	beq.n	800194a <HAL_RCC_OscConfig+0x502>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001920:	f7ff fabb 	bl	8000e9a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001924:	f7fe ff90 	bl	8000848 <HAL_GetTick>
 8001928:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x4f6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800192c:	f7fe ff8c 	bl	8000848 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e10d      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800193e:	f7ff face 	bl	8000ede <LL_RCC_HSI48_IsReady>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f1      	beq.n	800192c <HAL_RCC_OscConfig+0x4e4>
 8001948:	e013      	b.n	8001972 <HAL_RCC_OscConfig+0x52a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800194a:	f7ff fab7 	bl	8000ebc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194e:	f7fe ff7b 	bl	8000848 <HAL_GetTick>
 8001952:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x520>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001956:	f7fe ff77 	bl	8000848 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e0f8      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001968:	f7ff fab9 	bl	8000ede <LL_RCC_HSI48_IsReady>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f1      	bne.n	8001956 <HAL_RCC_OscConfig+0x50e>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 80ee 	beq.w	8001b58 <HAL_RCC_OscConfig+0x710>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800197c:	f7ff fc17 	bl	80011ae <LL_RCC_GetSysClkSource>
 8001980:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	2b02      	cmp	r3, #2
 8001990:	f040 80b4 	bne.w	8001afc <HAL_RCC_OscConfig+0x6b4>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 0203 	and.w	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	429a      	cmp	r2, r3
 80019a0:	d123      	bne.n	80019ea <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d11c      	bne.n	80019ea <HAL_RCC_OscConfig+0x5a2>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	0a1b      	lsrs	r3, r3, #8
 80019b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019bc:	429a      	cmp	r2, r3
 80019be:	d114      	bne.n	80019ea <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d10d      	bne.n	80019ea <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019d8:	429a      	cmp	r2, r3
 80019da:	d106      	bne.n	80019ea <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d05d      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x65e>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	2b0c      	cmp	r3, #12
 80019ee:	d058      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x65a>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_RCC_OscConfig+0x5ba>

          {
            return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e0ab      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a02:	f7ff fc72 	bl	80012ea <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a06:	f7fe ff1f 	bl	8000848 <HAL_GetTick>
 8001a0a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x5d8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0e:	f7fe ff1b 	bl	8000848 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x5d8>
              {
                return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e09c      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1ef      	bne.n	8001a0e <HAL_RCC_OscConfig+0x5c6>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	4b30      	ldr	r3, [pc, #192]	; (8001af8 <HAL_RCC_OscConfig+0x6b0>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a40:	4311      	orrs	r1, r2
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a46:	0212      	lsls	r2, r2, #8
 8001a48:	4311      	orrs	r1, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a4e:	4311      	orrs	r1, r2
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a54:	4311      	orrs	r1, r2
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a60:	4313      	orrs	r3, r2
 8001a62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a64:	f7ff fc32 	bl	80012cc <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a76:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a78:	f7fe fee6 	bl	8000848 <HAL_GetTick>
 8001a7c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x64a>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a80:	f7fe fee2 	bl	8000848 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x64a>
              {
                return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e063      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0ef      	beq.n	8001a80 <HAL_RCC_OscConfig+0x638>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa0:	e05a      	b.n	8001b58 <HAL_RCC_OscConfig+0x710>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e059      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d151      	bne.n	8001b58 <HAL_RCC_OscConfig+0x710>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ab4:	f7ff fc0a 	bl	80012cc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ac8:	f7fe febe 	bl	8000848 <HAL_GetTick>
 8001acc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x69a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad0:	f7fe feba 	bl	8000848 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x69a>
            {
              return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e03b      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0ef      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x688>
 8001af0:	e032      	b.n	8001b58 <HAL_RCC_OscConfig+0x710>
 8001af2:	bf00      	nop
 8001af4:	58000400 	.word	0x58000400
 8001af8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	2b0c      	cmp	r3, #12
 8001b00:	d028      	beq.n	8001b54 <HAL_RCC_OscConfig+0x70c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b02:	f7ff fbf2 	bl	80012ea <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b10:	f023 0303 	bic.w	r3, r3, #3
 8001b14:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8001b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b20:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b28:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2a:	f7fe fe8d 	bl	8000848 <HAL_GetTick>
 8001b2e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x6fc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b32:	f7fe fe89 	bl	8000848 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x6fc>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1ef      	bne.n	8001b32 <HAL_RCC_OscConfig+0x6ea>
 8001b52:	e001      	b.n	8001b58 <HAL_RCC_OscConfig+0x710>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <HAL_RCC_OscConfig+0x712>
      }
    }
  }
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3734      	adds	r7, #52	; 0x34
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd90      	pop	{r4, r7, pc}
 8001b62:	bf00      	nop

08001b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e12d      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b78:	4b98      	ldr	r3, [pc, #608]	; (8001ddc <HAL_RCC_ClockConfig+0x278>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d91b      	bls.n	8001bbe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b95      	ldr	r3, [pc, #596]	; (8001ddc <HAL_RCC_ClockConfig+0x278>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 0207 	bic.w	r2, r3, #7
 8001b8e:	4993      	ldr	r1, [pc, #588]	; (8001ddc <HAL_RCC_ClockConfig+0x278>)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b96:	f7fe fe57 	bl	8000848 <HAL_GetTick>
 8001b9a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001b9e:	f7fe fe53 	bl	8000848 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e111      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb0:	4b8a      	ldr	r3, [pc, #552]	; (8001ddc <HAL_RCC_ClockConfig+0x278>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d1ef      	bne.n	8001b9e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d016      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff faf9 	bl	80011c6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001bd4:	f7fe fe38 	bl	8000848 <HAL_GetTick>
 8001bd8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001bdc:	f7fe fe34 	bl	8000848 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e0f2      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001bee:	f7ff fbce 	bl	800138e <LL_RCC_IsActiveFlag_HPRE>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f1      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0320 	and.w	r3, r3, #32
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d016      	beq.n	8001c32 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff faf0 	bl	80011ee <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001c0e:	f7fe fe1b 	bl	8000848 <HAL_GetTick>
 8001c12:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c16:	f7fe fe17 	bl	8000848 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e0d5      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001c28:	f7ff fbc3 	bl	80013b2 <LL_RCC_IsActiveFlag_C2HPRE>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f1      	beq.n	8001c16 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d016      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fae9 	bl	800121a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001c48:	f7fe fdfe 	bl	8000848 <HAL_GetTick>
 8001c4c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c50:	f7fe fdfa 	bl	8000848 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e0b8      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001c62:	f7ff fbb9 	bl	80013d8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0f1      	beq.n	8001c50 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d016      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fae3 	bl	8001248 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001c82:	f7fe fde1 	bl	8000848 <HAL_GetTick>
 8001c86:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c8a:	f7fe fddd 	bl	8000848 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e09b      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001c9c:	f7ff fbaf 	bl	80013fe <LL_RCC_IsActiveFlag_PPRE1>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f1      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d017      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fad9 	bl	8001270 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001cbe:	f7fe fdc3 	bl	8000848 <HAL_GetTick>
 8001cc2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001cc6:	f7fe fdbf 	bl	8000848 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e07d      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001cd8:	f7ff fba3 	bl	8001422 <LL_RCC_IsActiveFlag_PPRE2>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f1      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d043      	beq.n	8001d76 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d106      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001cf6:	f7ff f879 	bl	8000dec <LL_RCC_HSE_IsReady>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d11e      	bne.n	8001d3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e067      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d106      	bne.n	8001d1a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001d0c:	f7ff fafc 	bl	8001308 <LL_RCC_PLL_IsReady>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d113      	bne.n	8001d3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e05c      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d106      	bne.n	8001d30 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001d22:	f7ff f9e1 	bl	80010e8 <LL_RCC_MSI_IsReady>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d108      	bne.n	8001d3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e051      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001d30:	f7ff f88c 	bl	8000e4c <LL_RCC_HSI_IsReady>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e04a      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fa1f 	bl	8001186 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d48:	f7fe fd7e 	bl	8000848 <HAL_GetTick>
 8001d4c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d50:	f7fe fd7a 	bl	8000848 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e036      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	f7ff fa22 	bl	80011ae <LL_RCC_GetSysClkSource>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d1ec      	bne.n	8001d50 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d76:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HAL_RCC_ClockConfig+0x278>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d21b      	bcs.n	8001dbc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d84:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <HAL_RCC_ClockConfig+0x278>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f023 0207 	bic.w	r2, r3, #7
 8001d8c:	4913      	ldr	r1, [pc, #76]	; (8001ddc <HAL_RCC_ClockConfig+0x278>)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d94:	f7fe fd58 	bl	8000848 <HAL_GetTick>
 8001d98:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001d9c:	f7fe fd54 	bl	8000848 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e012      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_ClockConfig+0x278>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d1ef      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001dbc:	f000 f880 	bl	8001ec0 <HAL_RCC_GetHCLKFreq>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4a07      	ldr	r2, [pc, #28]	; (8001de0 <HAL_RCC_ClockConfig+0x27c>)
 8001dc4:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8001dc6:	f7fe fd4b 	bl	8000860 <HAL_GetTickPrio>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fced 	bl	80007ac <HAL_InitTick>
 8001dd2:	4603      	mov	r3, r0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	58004000 	.word	0x58004000
 8001de0:	20000004 	.word	0x20000004

08001de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de4:	b590      	push	{r4, r7, lr}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dea:	f7ff f9e0 	bl	80011ae <LL_RCC_GetSysClkSource>
 8001dee:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10a      	bne.n	8001e0c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001df6:	f7ff f99c 	bl	8001132 <LL_RCC_MSI_GetRange>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	4a2b      	ldr	r2, [pc, #172]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	e04b      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d102      	bne.n	8001e18 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e12:	4b28      	ldr	r3, [pc, #160]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	e045      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d10a      	bne.n	8001e34 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001e1e:	f7fe ffb5 	bl	8000d8c <LL_RCC_HSE_IsEnabledDiv2>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d102      	bne.n	8001e2e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001e28:	4b23      	ldr	r3, [pc, #140]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	e03a      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001e2e:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <HAL_RCC_GetSysClockFreq+0xd8>)
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	e037      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001e34:	f7ff fa9f 	bl	8001376 <LL_RCC_PLL_GetMainSource>
 8001e38:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d003      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x64>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d003      	beq.n	8001e4e <HAL_RCC_GetSysClockFreq+0x6a>
 8001e46:	e00d      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001e48:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e4a:	60bb      	str	r3, [r7, #8]
        break;
 8001e4c:	e015      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001e4e:	f7fe ff9d 	bl	8000d8c <LL_RCC_HSE_IsEnabledDiv2>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d102      	bne.n	8001e5e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001e58:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001e5a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001e5c:	e00d      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8001e5e:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <HAL_RCC_GetSysClockFreq+0xd8>)
 8001e60:	60bb      	str	r3, [r7, #8]
        break;
 8001e62:	e00a      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001e64:	f7ff f965 	bl	8001132 <LL_RCC_MSI_GetRange>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	091b      	lsrs	r3, r3, #4
 8001e6c:	f003 030f 	and.w	r3, r3, #15
 8001e70:	4a0f      	ldr	r2, [pc, #60]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e76:	60bb      	str	r3, [r7, #8]
        break;
 8001e78:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8001e7a:	f7ff fa57 	bl	800132c <LL_RCC_PLL_GetN>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	fb03 f402 	mul.w	r4, r3, r2
 8001e86:	f7ff fa6a 	bl	800135e <LL_RCC_PLL_GetDivider>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	3301      	adds	r3, #1
 8001e90:	fbb4 f4f3 	udiv	r4, r4, r3
 8001e94:	f7ff fa57 	bl	8001346 <LL_RCC_PLL_GetR>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	0f5b      	lsrs	r3, r3, #29
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	fbb4 f3f3 	udiv	r3, r4, r3
 8001ea2:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd90      	pop	{r4, r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	08003794 	.word	0x08003794
 8001eb4:	00f42400 	.word	0x00f42400
 8001eb8:	003d0900 	.word	0x003d0900
 8001ebc:	007a1200 	.word	0x007a1200

08001ec0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec0:	b598      	push	{r3, r4, r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001ec4:	f7ff ff8e 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8001ec8:	4604      	mov	r4, r0
 8001eca:	f7ff f9e5 	bl	8001298 <LL_RCC_GetAHBPrescaler>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	4a03      	ldr	r2, [pc, #12]	; (8001ee4 <HAL_RCC_GetHCLKFreq+0x24>)
 8001ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001edc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	bd98      	pop	{r3, r4, r7, pc}
 8001ee4:	08003754 	.word	0x08003754

08001ee8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2bb0      	cmp	r3, #176	; 0xb0
 8001ef4:	d903      	bls.n	8001efe <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	e007      	b.n	8001f0e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	4a11      	ldr	r2, [pc, #68]	; (8001f4c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001f0e:	f7ff f9cf 	bl	80012b0 <LL_RCC_GetAHB4Prescaler>
 8001f12:	4603      	mov	r3, r0
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	4a0d      	ldr	r2, [pc, #52]	; (8001f50 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8001f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f26:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8001f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f30:	0c9c      	lsrs	r4, r3, #18
 8001f32:	f7fe ff1d 	bl	8000d70 <HAL_PWREx_GetVoltageRange>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f000 f80c 	bl	8001f58 <RCC_SetFlashLatency>
 8001f40:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd90      	pop	{r4, r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	08003794 	.word	0x08003794
 8001f50:	08003754 	.word	0x08003754
 8001f54:	431bde83 	.word	0x431bde83

08001f58 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b093      	sub	sp, #76	; 0x4c
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001f62:	4b37      	ldr	r3, [pc, #220]	; (8002040 <RCC_SetFlashLatency+0xe8>)
 8001f64:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001f68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8001f6e:	4a35      	ldr	r2, [pc, #212]	; (8002044 <RCC_SetFlashLatency+0xec>)
 8001f70:	f107 031c 	add.w	r3, r7, #28
 8001f74:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001f7a:	4b33      	ldr	r3, [pc, #204]	; (8002048 <RCC_SetFlashLatency+0xf0>)
 8001f7c:	f107 040c 	add.w	r4, r7, #12
 8001f80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001f86:	2300      	movs	r3, #0
 8001f88:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f90:	d11a      	bne.n	8001fc8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001f92:	2300      	movs	r3, #0
 8001f94:	643b      	str	r3, [r7, #64]	; 0x40
 8001f96:	e013      	b.n	8001fc0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	3348      	adds	r3, #72	; 0x48
 8001f9e:	443b      	add	r3, r7
 8001fa0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d807      	bhi.n	8001fba <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	3348      	adds	r3, #72	; 0x48
 8001fb0:	443b      	add	r3, r7
 8001fb2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001fb6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8001fb8:	e020      	b.n	8001ffc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	643b      	str	r3, [r7, #64]	; 0x40
 8001fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	d9e8      	bls.n	8001f98 <RCC_SetFlashLatency+0x40>
 8001fc6:	e019      	b.n	8001ffc <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fcc:	e013      	b.n	8001ff6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	3348      	adds	r3, #72	; 0x48
 8001fd4:	443b      	add	r3, r7
 8001fd6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d807      	bhi.n	8001ff0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	3348      	adds	r3, #72	; 0x48
 8001fe6:	443b      	add	r3, r7
 8001fe8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001fec:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8001fee:	e005      	b.n	8001ffc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d9e8      	bls.n	8001fce <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8001ffc:	4b13      	ldr	r3, [pc, #76]	; (800204c <RCC_SetFlashLatency+0xf4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f023 0207 	bic.w	r2, r3, #7
 8002004:	4911      	ldr	r1, [pc, #68]	; (800204c <RCC_SetFlashLatency+0xf4>)
 8002006:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002008:	4313      	orrs	r3, r2
 800200a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800200c:	f7fe fc1c 	bl	8000848 <HAL_GetTick>
 8002010:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002012:	e008      	b.n	8002026 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002014:	f7fe fc18 	bl	8000848 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e007      	b.n	8002036 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <RCC_SetFlashLatency+0xf4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002030:	429a      	cmp	r2, r3
 8002032:	d1ef      	bne.n	8002014 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	374c      	adds	r7, #76	; 0x4c
 800203a:	46bd      	mov	sp, r7
 800203c:	bd90      	pop	{r4, r7, pc}
 800203e:	bf00      	nop
 8002040:	08003728 	.word	0x08003728
 8002044:	08003738 	.word	0x08003738
 8002048:	08003744 	.word	0x08003744
 800204c:	58004000 	.word	0x58004000

08002050 <LL_RCC_LSE_IsEnabled>:
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <LL_RCC_LSE_IsEnabled+0x18>
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <LL_RCC_LSE_IsEnabled+0x1a>
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <LL_RCC_LSE_IsReady>:
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b02      	cmp	r3, #2
 8002086:	d101      	bne.n	800208c <LL_RCC_LSE_IsReady+0x18>
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <LL_RCC_LSE_IsReady+0x1a>
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <LL_RCC_SetRFWKPClockSource>:
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80020a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <LL_RCC_SetSMPSClockSource>:
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80020cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	f023 0203 	bic.w	r2, r3, #3
 80020d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4313      	orrs	r3, r2
 80020de:	624b      	str	r3, [r1, #36]	; 0x24
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <LL_RCC_SetSMPSPrescaler>:
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80020f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4313      	orrs	r3, r2
 8002106:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_RCC_SetUSARTClockSource>:
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800211c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002124:	f023 0203 	bic.w	r2, r3, #3
 8002128:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <LL_RCC_SetLPUARTClockSource>:
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002150:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002154:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_RCC_SetI2CClockSource>:
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002178:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	091b      	lsrs	r3, r3, #4
 8002180:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002184:	43db      	mvns	r3, r3
 8002186:	401a      	ands	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002190:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <LL_RCC_SetLPTIMClockSource>:
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80021ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	0c1b      	lsrs	r3, r3, #16
 80021ba:	041b      	lsls	r3, r3, #16
 80021bc:	43db      	mvns	r3, r3
 80021be:	401a      	ands	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	041b      	lsls	r3, r3, #16
 80021c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021c8:	4313      	orrs	r3, r2
 80021ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <LL_RCC_SetSAIClockSource>:
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80021e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <LL_RCC_SetRNGClockSource>:
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800220e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002216:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800221a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <LL_RCC_SetCLK48ClockSource>:
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800223a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002242:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002246:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <LL_RCC_SetUSBClockSource>:
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff ffe3 	bl	8002232 <LL_RCC_SetCLK48ClockSource>
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <LL_RCC_SetADCClockSource>:
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800227c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002284:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002288:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4313      	orrs	r3, r2
 8002290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LL_RCC_SetRTCClockSource>:
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80022a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <LL_RCC_GetRTCClockSource>:
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80022d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <LL_RCC_ForceBackupDomainReset>:
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80022ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800230c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002314:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800231c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <LL_RCC_PLLSAI1_Enable>:
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800232e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002338:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800233c:	6013      	str	r3, [r2, #0]
}
 800233e:	bf00      	nop
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <LL_RCC_PLLSAI1_Disable>:
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800234c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002356:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800235a:	6013      	str	r3, [r2, #0]
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <LL_RCC_PLLSAI1_IsReady>:
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800236a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002374:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002378:	d101      	bne.n	800237e <LL_RCC_PLLSAI1_IsReady+0x18>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b088      	sub	sp, #32
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002392:	2300      	movs	r3, #0
 8002394:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002396:	2300      	movs	r3, #0
 8002398:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d034      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023ae:	d021      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80023b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023b4:	d81b      	bhi.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023ba:	d01d      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80023bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023c0:	d815      	bhi.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00b      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x54>
 80023c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ca:	d110      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80023cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023da:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80023dc:	e00d      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3304      	adds	r3, #4
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 f947 	bl	8002676 <RCCEx_PLLSAI1_ConfigNP>
 80023e8:	4603      	mov	r3, r0
 80023ea:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80023ec:	e005      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	77fb      	strb	r3, [r7, #31]
        break;
 80023f2:	e002      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80023f4:	bf00      	nop
 80023f6:	e000      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80023f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80023fa:	7ffb      	ldrb	r3, [r7, #31]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d105      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fee8 	bl	80021da <LL_RCC_SetSAIClockSource>
 800240a:	e001      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800240c:	7ffb      	ldrb	r3, [r7, #31]
 800240e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002418:	2b00      	cmp	r3, #0
 800241a:	d046      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800241c:	f7ff ff56 	bl	80022cc <LL_RCC_GetRTCClockSource>
 8002420:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	429a      	cmp	r2, r3
 800242a:	d03c      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800242c:	f7fe fc90 	bl	8000d50 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d105      	bne.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff ff30 	bl	80022a0 <LL_RCC_SetRTCClockSource>
 8002440:	e02e      	b.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800244c:	f7ff ff4b 	bl	80022e6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002450:	f7ff ff5a 	bl	8002308 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	4313      	orrs	r3, r2
 8002460:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002462:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800246c:	f7ff fdf0 	bl	8002050 <LL_RCC_LSE_IsEnabled>
 8002470:	4603      	mov	r3, r0
 8002472:	2b01      	cmp	r3, #1
 8002474:	d114      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002476:	f7fe f9e7 	bl	8000848 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800247c:	e00b      	b.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247e:	f7fe f9e3 	bl	8000848 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f241 3288 	movw	r2, #5000	; 0x1388
 800248c:	4293      	cmp	r3, r2
 800248e:	d902      	bls.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	77fb      	strb	r3, [r7, #31]
              break;
 8002494:	e004      	b.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002496:	f7ff fded 	bl	8002074 <LL_RCC_LSE_IsReady>
 800249a:	4603      	mov	r3, r0
 800249c:	2b01      	cmp	r3, #1
 800249e:	d1ee      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80024a0:	7ffb      	ldrb	r3, [r7, #31]
 80024a2:	77bb      	strb	r3, [r7, #30]
 80024a4:	e001      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024a6:	7ffb      	ldrb	r3, [r7, #31]
 80024a8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d004      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fe2a 	bl	8002114 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d004      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fe35 	bl	8002140 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d004      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fe5d 	bl	80021a6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d004      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fe52 	bl	80021a6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b00      	cmp	r3, #0
 800250c:	d004      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fe2a 	bl	800216c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b00      	cmp	r3, #0
 8002522:	d004      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fe1f 	bl	800216c <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002536:	2b00      	cmp	r3, #0
 8002538:	d022      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fe8d 	bl	800225e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002548:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800254c:	d107      	bne.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800254e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002558:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800255c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002562:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002566:	d10b      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3304      	adds	r3, #4
 800256c:	4618      	mov	r0, r3
 800256e:	f000 f8dd 	bl	800272c <RCCEx_PLLSAI1_ConfigNQ>
 8002572:	4603      	mov	r3, r0
 8002574:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8002576:	7ffb      	ldrb	r3, [r7, #31]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 800257c:	7ffb      	ldrb	r3, [r7, #31]
 800257e:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002588:	2b00      	cmp	r3, #0
 800258a:	d02b      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002594:	d008      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800259e:	d003      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fe2a 	bl	8002206 <LL_RCC_SetRNGClockSource>
 80025b2:	e00a      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x240>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	2000      	movs	r0, #0
 80025c0:	f7ff fe21 	bl	8002206 <LL_RCC_SetRNGClockSource>
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f7ff fe34 	bl	8002232 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ce:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80025d2:	d107      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80025d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d022      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fe3d 	bl	8002274 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002602:	d107      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800260e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002612:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002618:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800261c:	d10b      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3304      	adds	r3, #4
 8002622:	4618      	mov	r0, r3
 8002624:	f000 f8dd 	bl	80027e2 <RCCEx_PLLSAI1_ConfigNR>
 8002628:	4603      	mov	r3, r0
 800262a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800262c:	7ffb      	ldrb	r3, [r7, #31]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8002632:	7ffb      	ldrb	r3, [r7, #31]
 8002634:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d004      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff fd26 	bl	8002098 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d009      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fd45 	bl	80020ec <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fd2c 	bl	80020c4 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800266c:	7fbb      	ldrb	r3, [r7, #30]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3720      	adds	r7, #32
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002682:	f7ff fe61 	bl	8002348 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002686:	f7fe f8df 	bl	8000848 <HAL_GetTick>
 800268a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800268c:	e009      	b.n	80026a2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800268e:	f7fe f8db 	bl	8000848 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d902      	bls.n	80026a2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	73fb      	strb	r3, [r7, #15]
      break;
 80026a0:	e004      	b.n	80026ac <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80026a2:	f7ff fe60 	bl	8002366 <LL_RCC_PLLSAI1_IsReady>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1f0      	bne.n	800268e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d137      	bne.n	8002722 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80026b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	021b      	lsls	r3, r3, #8
 80026c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026c6:	4313      	orrs	r3, r2
 80026c8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80026ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026dc:	4313      	orrs	r3, r2
 80026de:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80026e0:	f7ff fe23 	bl	800232a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e4:	f7fe f8b0 	bl	8000848 <HAL_GetTick>
 80026e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80026ea:	e009      	b.n	8002700 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026ec:	f7fe f8ac 	bl	8000848 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d902      	bls.n	8002700 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	73fb      	strb	r3, [r7, #15]
        break;
 80026fe:	e004      	b.n	800270a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002700:	f7ff fe31 	bl	8002366 <LL_RCC_PLLSAI1_IsReady>
 8002704:	4603      	mov	r3, r0
 8002706:	2b01      	cmp	r3, #1
 8002708:	d1f0      	bne.n	80026ec <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d108      	bne.n	8002722 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002714:	691a      	ldr	r2, [r3, #16]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800271e:	4313      	orrs	r3, r2
 8002720:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002722:	7bfb      	ldrb	r3, [r7, #15]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002738:	f7ff fe06 	bl	8002348 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800273c:	f7fe f884 	bl	8000848 <HAL_GetTick>
 8002740:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002742:	e009      	b.n	8002758 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002744:	f7fe f880 	bl	8000848 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d902      	bls.n	8002758 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	73fb      	strb	r3, [r7, #15]
      break;
 8002756:	e004      	b.n	8002762 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002758:	f7ff fe05 	bl	8002366 <LL_RCC_PLLSAI1_IsReady>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d137      	bne.n	80027d8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	021b      	lsls	r3, r3, #8
 8002778:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800277c:	4313      	orrs	r3, r2
 800277e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002792:	4313      	orrs	r3, r2
 8002794:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002796:	f7ff fdc8 	bl	800232a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800279a:	f7fe f855 	bl	8000848 <HAL_GetTick>
 800279e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80027a0:	e009      	b.n	80027b6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027a2:	f7fe f851 	bl	8000848 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d902      	bls.n	80027b6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	73fb      	strb	r3, [r7, #15]
        break;
 80027b4:	e004      	b.n	80027c0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80027b6:	f7ff fdd6 	bl	8002366 <LL_RCC_PLLSAI1_IsReady>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d1f0      	bne.n	80027a2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d108      	bne.n	80027d8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80027c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ca:	691a      	ldr	r2, [r3, #16]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027d4:	4313      	orrs	r3, r2
 80027d6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b084      	sub	sp, #16
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80027ee:	f7ff fdab 	bl	8002348 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80027f2:	f7fe f829 	bl	8000848 <HAL_GetTick>
 80027f6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80027f8:	e009      	b.n	800280e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027fa:	f7fe f825 	bl	8000848 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d902      	bls.n	800280e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	73fb      	strb	r3, [r7, #15]
      break;
 800280c:	e004      	b.n	8002818 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800280e:	f7ff fdaa 	bl	8002366 <LL_RCC_PLLSAI1_IsReady>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f0      	bne.n	80027fa <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d137      	bne.n	800288e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800281e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	021b      	lsls	r3, r3, #8
 800282e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002832:	4313      	orrs	r3, r2
 8002834:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002848:	4313      	orrs	r3, r2
 800284a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800284c:	f7ff fd6d 	bl	800232a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002850:	f7fd fffa 	bl	8000848 <HAL_GetTick>
 8002854:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002856:	e009      	b.n	800286c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002858:	f7fd fff6 	bl	8000848 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d902      	bls.n	800286c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	73fb      	strb	r3, [r7, #15]
        break;
 800286a:	e004      	b.n	8002876 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800286c:	f7ff fd7b 	bl	8002366 <LL_RCC_PLLSAI1_IsReady>
 8002870:	4603      	mov	r3, r0
 8002872:	2b01      	cmp	r3, #1
 8002874:	d1f0      	bne.n	8002858 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8002876:	7bfb      	ldrb	r3, [r7, #15]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d108      	bne.n	800288e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800287c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002880:	691a      	ldr	r2, [r3, #16]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800288a:	4313      	orrs	r3, r2
 800288c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800288e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e095      	b.n	80029d6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d108      	bne.n	80028c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028ba:	d009      	beq.n	80028d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	61da      	str	r2, [r3, #28]
 80028c2:	e005      	b.n	80028d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d106      	bne.n	80028f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7fd fdfe 	bl	80004ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002906:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002910:	d902      	bls.n	8002918 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	e002      	b.n	800291e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800291c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002926:	d007      	beq.n	8002938 <HAL_SPI_Init+0xa0>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002930:	d002      	beq.n	8002938 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002970:	431a      	orrs	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297a:	ea42 0103 	orr.w	r1, r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002982:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	0c1b      	lsrs	r3, r3, #16
 8002994:	f003 0204 	and.w	r2, r3, #4
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80029b4:	ea42 0103 	orr.w	r1, r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b088      	sub	sp, #32
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	603b      	str	r3, [r7, #0]
 80029ea:	4613      	mov	r3, r2
 80029ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <HAL_SPI_Transmit+0x22>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e158      	b.n	8002cb2 <HAL_SPI_Transmit+0x2d4>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a08:	f7fd ff1e 	bl	8000848 <HAL_GetTick>
 8002a0c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a0e:	88fb      	ldrh	r3, [r7, #6]
 8002a10:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d002      	beq.n	8002a24 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a22:	e13d      	b.n	8002ca0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <HAL_SPI_Transmit+0x52>
 8002a2a:	88fb      	ldrh	r3, [r7, #6]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d102      	bne.n	8002a36 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a34:	e134      	b.n	8002ca0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2203      	movs	r2, #3
 8002a3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	88fa      	ldrh	r2, [r7, #6]
 8002a4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	88fa      	ldrh	r2, [r7, #6]
 8002a54:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a80:	d10f      	bne.n	8002aa2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002aa0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aac:	2b40      	cmp	r3, #64	; 0x40
 8002aae:	d007      	beq.n	8002ac0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002abe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ac8:	d94b      	bls.n	8002b62 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <HAL_SPI_Transmit+0xfa>
 8002ad2:	8afb      	ldrh	r3, [r7, #22]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d13e      	bne.n	8002b56 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002adc:	881a      	ldrh	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	1c9a      	adds	r2, r3, #2
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002afc:	e02b      	b.n	8002b56 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d112      	bne.n	8002b32 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b10:	881a      	ldrh	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	1c9a      	adds	r2, r3, #2
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b30:	e011      	b.n	8002b56 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b32:	f7fd fe89 	bl	8000848 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d803      	bhi.n	8002b4a <HAL_SPI_Transmit+0x16c>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b48:	d102      	bne.n	8002b50 <HAL_SPI_Transmit+0x172>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d102      	bne.n	8002b56 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b54:	e0a4      	b.n	8002ca0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1ce      	bne.n	8002afe <HAL_SPI_Transmit+0x120>
 8002b60:	e07c      	b.n	8002c5c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HAL_SPI_Transmit+0x192>
 8002b6a:	8afb      	ldrh	r3, [r7, #22]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d170      	bne.n	8002c52 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d912      	bls.n	8002ba0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7e:	881a      	ldrh	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8a:	1c9a      	adds	r2, r3, #2
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3b02      	subs	r3, #2
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b9e:	e058      	b.n	8002c52 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	330c      	adds	r3, #12
 8002baa:	7812      	ldrb	r2, [r2, #0]
 8002bac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002bc6:	e044      	b.n	8002c52 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d12b      	bne.n	8002c2e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d912      	bls.n	8002c06 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be4:	881a      	ldrh	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf0:	1c9a      	adds	r2, r3, #2
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	3b02      	subs	r3, #2
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c04:	e025      	b.n	8002c52 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	330c      	adds	r3, #12
 8002c10:	7812      	ldrb	r2, [r2, #0]
 8002c12:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c2c:	e011      	b.n	8002c52 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c2e:	f7fd fe0b 	bl	8000848 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d803      	bhi.n	8002c46 <HAL_SPI_Transmit+0x268>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c44:	d102      	bne.n	8002c4c <HAL_SPI_Transmit+0x26e>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d102      	bne.n	8002c52 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c50:	e026      	b.n	8002ca0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1b5      	bne.n	8002bc8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	6839      	ldr	r1, [r7, #0]
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 fce3 	bl	800362c <SPI_EndRxTxTransaction>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d002      	beq.n	8002c72 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10a      	bne.n	8002c90 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	77fb      	strb	r3, [r7, #31]
 8002c9c:	e000      	b.n	8002ca0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002c9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002cb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3720      	adds	r7, #32
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b088      	sub	sp, #32
 8002cbe:	af02      	add	r7, sp, #8
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	603b      	str	r3, [r7, #0]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cd6:	d112      	bne.n	8002cfe <HAL_SPI_Receive+0x44>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10e      	bne.n	8002cfe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ce8:	88fa      	ldrh	r2, [r7, #6]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	68b9      	ldr	r1, [r7, #8]
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 f910 	bl	8002f1a <HAL_SPI_TransmitReceive>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	e109      	b.n	8002f12 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_SPI_Receive+0x52>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e102      	b.n	8002f12 <HAL_SPI_Receive+0x258>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d14:	f7fd fd98 	bl	8000848 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d002      	beq.n	8002d2c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002d26:	2302      	movs	r3, #2
 8002d28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d2a:	e0e9      	b.n	8002f00 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <HAL_SPI_Receive+0x7e>
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d102      	bne.n	8002d3e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d3c:	e0e0      	b.n	8002f00 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2204      	movs	r2, #4
 8002d42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	88fa      	ldrh	r2, [r7, #6]
 8002d56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	88fa      	ldrh	r2, [r7, #6]
 8002d5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d88:	d908      	bls.n	8002d9c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	e007      	b.n	8002dac <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002daa:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002db4:	d10f      	bne.n	8002dd6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002dd4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de0:	2b40      	cmp	r3, #64	; 0x40
 8002de2:	d007      	beq.n	8002df4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002df2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002dfc:	d867      	bhi.n	8002ece <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002dfe:	e030      	b.n	8002e62 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d117      	bne.n	8002e3e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f103 020c 	add.w	r2, r3, #12
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	7812      	ldrb	r2, [r2, #0]
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002e3c:	e011      	b.n	8002e62 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e3e:	f7fd fd03 	bl	8000848 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d803      	bhi.n	8002e56 <HAL_SPI_Receive+0x19c>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e54:	d102      	bne.n	8002e5c <HAL_SPI_Receive+0x1a2>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d102      	bne.n	8002e62 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002e60:	e04e      	b.n	8002f00 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1c8      	bne.n	8002e00 <HAL_SPI_Receive+0x146>
 8002e6e:	e034      	b.n	8002eda <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d115      	bne.n	8002eaa <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	b292      	uxth	r2, r2
 8002e8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	1c9a      	adds	r2, r3, #2
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002ea8:	e011      	b.n	8002ece <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eaa:	f7fd fccd 	bl	8000848 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d803      	bhi.n	8002ec2 <HAL_SPI_Receive+0x208>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec0:	d102      	bne.n	8002ec8 <HAL_SPI_Receive+0x20e>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d102      	bne.n	8002ece <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ecc:	e018      	b.n	8002f00 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1ca      	bne.n	8002e70 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	6839      	ldr	r1, [r7, #0]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 fb4c 	bl	800357c <SPI_EndRxTransaction>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2220      	movs	r2, #32
 8002eee:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	75fb      	strb	r3, [r7, #23]
 8002efc:	e000      	b.n	8002f00 <HAL_SPI_Receive+0x246>
  }

error :
 8002efe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b08a      	sub	sp, #40	; 0x28
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]
 8002f26:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_SPI_TransmitReceive+0x26>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e1fb      	b.n	8003338 <HAL_SPI_TransmitReceive+0x41e>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f48:	f7fd fc7e 	bl	8000848 <HAL_GetTick>
 8002f4c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f54:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002f5c:	887b      	ldrh	r3, [r7, #2]
 8002f5e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002f60:	887b      	ldrh	r3, [r7, #2]
 8002f62:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f64:	7efb      	ldrb	r3, [r7, #27]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d00e      	beq.n	8002f88 <HAL_SPI_TransmitReceive+0x6e>
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f70:	d106      	bne.n	8002f80 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d102      	bne.n	8002f80 <HAL_SPI_TransmitReceive+0x66>
 8002f7a:	7efb      	ldrb	r3, [r7, #27]
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d003      	beq.n	8002f88 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002f80:	2302      	movs	r3, #2
 8002f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002f86:	e1cd      	b.n	8003324 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d005      	beq.n	8002f9a <HAL_SPI_TransmitReceive+0x80>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <HAL_SPI_TransmitReceive+0x80>
 8002f94:	887b      	ldrh	r3, [r7, #2]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d103      	bne.n	8002fa2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002fa0:	e1c0      	b.n	8003324 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d003      	beq.n	8002fb6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2205      	movs	r2, #5
 8002fb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	887a      	ldrh	r2, [r7, #2]
 8002fc6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	887a      	ldrh	r2, [r7, #2]
 8002fce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	887a      	ldrh	r2, [r7, #2]
 8002fdc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	887a      	ldrh	r2, [r7, #2]
 8002fe2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ff8:	d802      	bhi.n	8003000 <HAL_SPI_TransmitReceive+0xe6>
 8002ffa:	8a3b      	ldrh	r3, [r7, #16]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d908      	bls.n	8003012 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800300e:	605a      	str	r2, [r3, #4]
 8003010:	e007      	b.n	8003022 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003020:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302c:	2b40      	cmp	r3, #64	; 0x40
 800302e:	d007      	beq.n	8003040 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800303e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003048:	d97c      	bls.n	8003144 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_SPI_TransmitReceive+0x13e>
 8003052:	8a7b      	ldrh	r3, [r7, #18]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d169      	bne.n	800312c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305c:	881a      	ldrh	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003068:	1c9a      	adds	r2, r3, #2
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800307c:	e056      	b.n	800312c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b02      	cmp	r3, #2
 800308a:	d11b      	bne.n	80030c4 <HAL_SPI_TransmitReceive+0x1aa>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d016      	beq.n	80030c4 <HAL_SPI_TransmitReceive+0x1aa>
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	2b01      	cmp	r3, #1
 800309a:	d113      	bne.n	80030c4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a0:	881a      	ldrh	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ac:	1c9a      	adds	r2, r3, #2
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d11c      	bne.n	800310c <HAL_SPI_TransmitReceive+0x1f2>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d016      	beq.n	800310c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	b292      	uxth	r2, r2
 80030ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	1c9a      	adds	r2, r3, #2
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003108:	2301      	movs	r3, #1
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800310c:	f7fd fb9c 	bl	8000848 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003118:	429a      	cmp	r2, r3
 800311a:	d807      	bhi.n	800312c <HAL_SPI_TransmitReceive+0x212>
 800311c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003122:	d003      	beq.n	800312c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800312a:	e0fb      	b.n	8003324 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1a3      	bne.n	800307e <HAL_SPI_TransmitReceive+0x164>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d19d      	bne.n	800307e <HAL_SPI_TransmitReceive+0x164>
 8003142:	e0df      	b.n	8003304 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <HAL_SPI_TransmitReceive+0x23a>
 800314c:	8a7b      	ldrh	r3, [r7, #18]
 800314e:	2b01      	cmp	r3, #1
 8003150:	f040 80cb 	bne.w	80032ea <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b01      	cmp	r3, #1
 800315c:	d912      	bls.n	8003184 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003162:	881a      	ldrh	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316e:	1c9a      	adds	r2, r3, #2
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003178:	b29b      	uxth	r3, r3
 800317a:	3b02      	subs	r3, #2
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003182:	e0b2      	b.n	80032ea <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	330c      	adds	r3, #12
 800318e:	7812      	ldrb	r2, [r2, #0]
 8003190:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031aa:	e09e      	b.n	80032ea <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d134      	bne.n	8003224 <HAL_SPI_TransmitReceive+0x30a>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d02f      	beq.n	8003224 <HAL_SPI_TransmitReceive+0x30a>
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d12c      	bne.n	8003224 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d912      	bls.n	80031fa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	881a      	ldrh	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e4:	1c9a      	adds	r2, r3, #2
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	3b02      	subs	r3, #2
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031f8:	e012      	b.n	8003220 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	330c      	adds	r3, #12
 8003204:	7812      	ldrb	r2, [r2, #0]
 8003206:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003216:	b29b      	uxth	r3, r3
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b01      	cmp	r3, #1
 8003230:	d148      	bne.n	80032c4 <HAL_SPI_TransmitReceive+0x3aa>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003238:	b29b      	uxth	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d042      	beq.n	80032c4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003244:	b29b      	uxth	r3, r3
 8003246:	2b01      	cmp	r3, #1
 8003248:	d923      	bls.n	8003292 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	b292      	uxth	r2, r2
 8003256:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	1c9a      	adds	r2, r3, #2
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003268:	b29b      	uxth	r3, r3
 800326a:	3b02      	subs	r3, #2
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800327a:	b29b      	uxth	r3, r3
 800327c:	2b01      	cmp	r3, #1
 800327e:	d81f      	bhi.n	80032c0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800328e:	605a      	str	r2, [r3, #4]
 8003290:	e016      	b.n	80032c0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f103 020c 	add.w	r2, r3, #12
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	7812      	ldrb	r2, [r2, #0]
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	1c5a      	adds	r2, r3, #1
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032c0:	2301      	movs	r3, #1
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032c4:	f7fd fac0 	bl	8000848 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d803      	bhi.n	80032dc <HAL_SPI_TransmitReceive+0x3c2>
 80032d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032da:	d102      	bne.n	80032e2 <HAL_SPI_TransmitReceive+0x3c8>
 80032dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d103      	bne.n	80032ea <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80032e8:	e01c      	b.n	8003324 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f47f af5b 	bne.w	80031ac <HAL_SPI_TransmitReceive+0x292>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f47f af54 	bne.w	80031ac <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003304:	69fa      	ldr	r2, [r7, #28]
 8003306:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 f98f 	bl	800362c <SPI_EndRxTxTransaction>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d006      	beq.n	8003322 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2220      	movs	r2, #32
 800331e:	661a      	str	r2, [r3, #96]	; 0x60
 8003320:	e000      	b.n	8003324 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003322:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003334:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003338:	4618      	mov	r0, r3
 800333a:	3728      	adds	r7, #40	; 0x28
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	4613      	mov	r3, r2
 800334e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003350:	f7fd fa7a 	bl	8000848 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003358:	1a9b      	subs	r3, r3, r2
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	4413      	add	r3, r2
 800335e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003360:	f7fd fa72 	bl	8000848 <HAL_GetTick>
 8003364:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003366:	4b39      	ldr	r3, [pc, #228]	; (800344c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	015b      	lsls	r3, r3, #5
 800336c:	0d1b      	lsrs	r3, r3, #20
 800336e:	69fa      	ldr	r2, [r7, #28]
 8003370:	fb02 f303 	mul.w	r3, r2, r3
 8003374:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003376:	e054      	b.n	8003422 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337e:	d050      	beq.n	8003422 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003380:	f7fd fa62 	bl	8000848 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	69fa      	ldr	r2, [r7, #28]
 800338c:	429a      	cmp	r2, r3
 800338e:	d902      	bls.n	8003396 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d13d      	bne.n	8003412 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033ae:	d111      	bne.n	80033d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033b8:	d004      	beq.n	80033c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c2:	d107      	bne.n	80033d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033dc:	d10f      	bne.n	80033fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e017      	b.n	8003442 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	3b01      	subs	r3, #1
 8003420:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4013      	ands	r3, r2
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	429a      	cmp	r2, r3
 8003430:	bf0c      	ite	eq
 8003432:	2301      	moveq	r3, #1
 8003434:	2300      	movne	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	461a      	mov	r2, r3
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	429a      	cmp	r2, r3
 800343e:	d19b      	bne.n	8003378 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3720      	adds	r7, #32
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000004 	.word	0x20000004

08003450 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	; 0x28
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
 800345c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800345e:	2300      	movs	r3, #0
 8003460:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003462:	f7fd f9f1 	bl	8000848 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	4413      	add	r3, r2
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003472:	f7fd f9e9 	bl	8000848 <HAL_GetTick>
 8003476:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	330c      	adds	r3, #12
 800347e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003480:	4b3d      	ldr	r3, [pc, #244]	; (8003578 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	00da      	lsls	r2, r3, #3
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	0d1b      	lsrs	r3, r3, #20
 8003490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003492:	fb02 f303 	mul.w	r3, r2, r3
 8003496:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003498:	e060      	b.n	800355c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80034a0:	d107      	bne.n	80034b2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d104      	bne.n	80034b2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d050      	beq.n	800355c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034ba:	f7fd f9c5 	bl	8000848 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d902      	bls.n	80034d0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d13d      	bne.n	800354c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e8:	d111      	bne.n	800350e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034f2:	d004      	beq.n	80034fe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034fc:	d107      	bne.n	800350e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800350c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003516:	d10f      	bne.n	8003538 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003536:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e010      	b.n	800356e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	3b01      	subs	r3, #1
 800355a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4013      	ands	r3, r2
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	429a      	cmp	r2, r3
 800356a:	d196      	bne.n	800349a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3728      	adds	r7, #40	; 0x28
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20000004 	.word	0x20000004

0800357c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af02      	add	r7, sp, #8
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003590:	d111      	bne.n	80035b6 <SPI_EndRxTransaction+0x3a>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800359a:	d004      	beq.n	80035a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a4:	d107      	bne.n	80035b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035b4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2200      	movs	r2, #0
 80035be:	2180      	movs	r1, #128	; 0x80
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f7ff febd 	bl	8003340 <SPI_WaitFlagStateUntilTimeout>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d007      	beq.n	80035dc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d0:	f043 0220 	orr.w	r2, r3, #32
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e023      	b.n	8003624 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035e4:	d11d      	bne.n	8003622 <SPI_EndRxTransaction+0xa6>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ee:	d004      	beq.n	80035fa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f8:	d113      	bne.n	8003622 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2200      	movs	r2, #0
 8003602:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f7ff ff22 	bl	8003450 <SPI_WaitFifoStateUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d007      	beq.n	8003622 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003616:	f043 0220 	orr.w	r2, r3, #32
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e000      	b.n	8003624 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af02      	add	r7, sp, #8
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2200      	movs	r2, #0
 8003640:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f7ff ff03 	bl	8003450 <SPI_WaitFifoStateUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d007      	beq.n	8003660 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003654:	f043 0220 	orr.w	r2, r3, #32
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e027      	b.n	80036b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2200      	movs	r2, #0
 8003668:	2180      	movs	r1, #128	; 0x80
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f7ff fe68 	bl	8003340 <SPI_WaitFlagStateUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d007      	beq.n	8003686 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367a:	f043 0220 	orr.w	r2, r3, #32
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e014      	b.n	80036b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2200      	movs	r2, #0
 800368e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f7ff fedc 	bl	8003450 <SPI_WaitFifoStateUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d007      	beq.n	80036ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a2:	f043 0220 	orr.w	r2, r3, #32
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e000      	b.n	80036b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <__libc_init_array>:
 80036b8:	b570      	push	{r4, r5, r6, lr}
 80036ba:	4d0d      	ldr	r5, [pc, #52]	; (80036f0 <__libc_init_array+0x38>)
 80036bc:	4c0d      	ldr	r4, [pc, #52]	; (80036f4 <__libc_init_array+0x3c>)
 80036be:	1b64      	subs	r4, r4, r5
 80036c0:	10a4      	asrs	r4, r4, #2
 80036c2:	2600      	movs	r6, #0
 80036c4:	42a6      	cmp	r6, r4
 80036c6:	d109      	bne.n	80036dc <__libc_init_array+0x24>
 80036c8:	4d0b      	ldr	r5, [pc, #44]	; (80036f8 <__libc_init_array+0x40>)
 80036ca:	4c0c      	ldr	r4, [pc, #48]	; (80036fc <__libc_init_array+0x44>)
 80036cc:	f000 f820 	bl	8003710 <_init>
 80036d0:	1b64      	subs	r4, r4, r5
 80036d2:	10a4      	asrs	r4, r4, #2
 80036d4:	2600      	movs	r6, #0
 80036d6:	42a6      	cmp	r6, r4
 80036d8:	d105      	bne.n	80036e6 <__libc_init_array+0x2e>
 80036da:	bd70      	pop	{r4, r5, r6, pc}
 80036dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e0:	4798      	blx	r3
 80036e2:	3601      	adds	r6, #1
 80036e4:	e7ee      	b.n	80036c4 <__libc_init_array+0xc>
 80036e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ea:	4798      	blx	r3
 80036ec:	3601      	adds	r6, #1
 80036ee:	e7f2      	b.n	80036d6 <__libc_init_array+0x1e>
 80036f0:	080037d4 	.word	0x080037d4
 80036f4:	080037d4 	.word	0x080037d4
 80036f8:	080037d4 	.word	0x080037d4
 80036fc:	080037d8 	.word	0x080037d8

08003700 <memset>:
 8003700:	4402      	add	r2, r0
 8003702:	4603      	mov	r3, r0
 8003704:	4293      	cmp	r3, r2
 8003706:	d100      	bne.n	800370a <memset+0xa>
 8003708:	4770      	bx	lr
 800370a:	f803 1b01 	strb.w	r1, [r3], #1
 800370e:	e7f9      	b.n	8003704 <memset+0x4>

08003710 <_init>:
 8003710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003712:	bf00      	nop
 8003714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003716:	bc08      	pop	{r3}
 8003718:	469e      	mov	lr, r3
 800371a:	4770      	bx	lr

0800371c <_fini>:
 800371c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371e:	bf00      	nop
 8003720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003722:	bc08      	pop	{r3}
 8003724:	469e      	mov	lr, r3
 8003726:	4770      	bx	lr
