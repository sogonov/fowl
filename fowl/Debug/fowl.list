
fowl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d18  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002e54  08002e54  00012e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002f00  08002f00  00012f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002f04  08002f04  00012f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000004  08002f08  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000088  20000014  08002f18  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000009c  08002f18  0002009c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b541  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001c08  00000000  00000000  0002b585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001090  00000000  00000000  0002d190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000fc8  00000000  00000000  0002e220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001ff3f  00000000  00000000  0002f1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b792  00000000  00000000  0004f127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000ce57b  00000000  00000000  0005a8b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00128e34  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000043f0  00000000  00000000  00128e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	08002e3c 	.word	0x08002e3c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	08002e3c 	.word	0x08002e3c

0800017c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000188:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800018a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4313      	orrs	r3, r2
 8000192:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000198:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4013      	ands	r3, r2
 800019e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr

080001ae <cs_low>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void cs_low(){
 80001ae:	b580      	push	{r7, lr}
 80001b0:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, ADS_CS_Pin, GPIO_PIN_RESET); //CS установлен в ноль
 80001b2:	2200      	movs	r2, #0
 80001b4:	2110      	movs	r1, #16
 80001b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001ba:	f000 fce1 	bl	8000b80 <HAL_GPIO_WritePin>
	  }
 80001be:	bf00      	nop
 80001c0:	bd80      	pop	{r7, pc}

080001c2 <cs_high>:
static void cs_high(){
 80001c2:	b580      	push	{r7, lr}
 80001c4:	af00      	add	r7, sp, #0
	 	  HAL_GPIO_WritePin(GPIOA, ADS_CS_Pin, GPIO_PIN_SET); //CS установлен в ноль
 80001c6:	2201      	movs	r2, #1
 80001c8:	2110      	movs	r1, #16
 80001ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001ce:	f000 fcd7 	bl	8000b80 <HAL_GPIO_WritePin>
	 	  }
 80001d2:	bf00      	nop
 80001d4:	bd80      	pop	{r7, pc}
	...

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001dc:	f000 f9f6 	bl	80005cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e0:	f000 f818 	bl	8000214 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80001e4:	f000 f86e 	bl	80002c4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e8:	f000 f8c6 	bl	8000378 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001ec:	f000 f888 	bl	8000300 <MX_SPI1_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  cs_low();
 80001f0:	f7ff ffdd 	bl	80001ae <cs_low>
	  HAL_SPI_Transmit(&hspi1, data, 2, timeout);
 80001f4:	4b04      	ldr	r3, [pc, #16]	; (8000208 <main+0x30>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2202      	movs	r2, #2
 80001fa:	4904      	ldr	r1, [pc, #16]	; (800020c <main+0x34>)
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <main+0x38>)
 80001fe:	f002 fb1e 	bl	800283e <HAL_SPI_Transmit>
	  cs_high();
 8000202:	f7ff ffde 	bl	80001c2 <cs_high>
	  cs_low();
 8000206:	e7f3      	b.n	80001f0 <main+0x18>
 8000208:	20000004 	.word	0x20000004
 800020c:	20000094 	.word	0x20000094
 8000210:	20000030 	.word	0x20000030

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b09a      	sub	sp, #104	; 0x68
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0320 	add.w	r3, r7, #32
 800021e:	2248      	movs	r2, #72	; 0x48
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f002 fe02 	bl	8002e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]
 8000234:	611a      	str	r2, [r3, #16]
 8000236:	615a      	str	r2, [r3, #20]
 8000238:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800023a:	4b21      	ldr	r3, [pc, #132]	; (80002c0 <SystemClock_Config+0xac>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000242:	4a1f      	ldr	r2, [pc, #124]	; (80002c0 <SystemClock_Config+0xac>)
 8000244:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000248:	6013      	str	r3, [r2, #0]
 800024a:	4b1d      	ldr	r3, [pc, #116]	; (80002c0 <SystemClock_Config+0xac>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000252:	603b      	str	r3, [r7, #0]
 8000254:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000256:	2322      	movs	r3, #34	; 0x22
 8000258:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800025e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000260:	2301      	movs	r3, #1
 8000262:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000264:	2340      	movs	r3, #64	; 0x40
 8000266:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000268:	2300      	movs	r3, #0
 800026a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800026c:	2360      	movs	r3, #96	; 0x60
 800026e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000270:	2300      	movs	r3, #0
 8000272:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000274:	f107 0320 	add.w	r3, r7, #32
 8000278:	4618      	mov	r0, r3
 800027a:	f001 f815 	bl	80012a8 <HAL_RCC_OscConfig>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000284:	f000 f87f 	bl	8000386 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000288:	236f      	movs	r3, #111	; 0x6f
 800028a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800028c:	2300      	movs	r3, #0
 800028e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2100      	movs	r1, #0
 80002a8:	4618      	mov	r0, r3
 80002aa:	f001 fb8b 	bl	80019c4 <HAL_RCC_ClockConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80002b4:	f000 f867 	bl	8000386 <Error_Handler>
  }
}
 80002b8:	bf00      	nop
 80002ba:	3768      	adds	r7, #104	; 0x68
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	58000400 	.word	0x58000400

080002c4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b094      	sub	sp, #80	; 0x50
 80002c8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80002ca:	463b      	mov	r3, r7
 80002cc:	2250      	movs	r2, #80	; 0x50
 80002ce:	2100      	movs	r1, #0
 80002d0:	4618      	mov	r0, r3
 80002d2:	f002 fdab 	bl	8002e2c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80002d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002da:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80002dc:	2300      	movs	r3, #0
 80002de:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80002e0:	2310      	movs	r3, #16
 80002e2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80002e4:	463b      	mov	r3, r7
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 ff7f 	bl	80021ea <HAL_RCCEx_PeriphCLKConfig>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80002f2:	f000 f848 	bl	8000386 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80002f6:	bf00      	nop
 80002f8:	3750      	adds	r7, #80	; 0x50
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
	...

08000300 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000304:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <MX_SPI1_Init+0x70>)
 8000306:	4a1b      	ldr	r2, [pc, #108]	; (8000374 <MX_SPI1_Init+0x74>)
 8000308:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800030a:	4b19      	ldr	r3, [pc, #100]	; (8000370 <MX_SPI1_Init+0x70>)
 800030c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000310:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000312:	4b17      	ldr	r3, [pc, #92]	; (8000370 <MX_SPI1_Init+0x70>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000318:	4b15      	ldr	r3, [pc, #84]	; (8000370 <MX_SPI1_Init+0x70>)
 800031a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800031e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000320:	4b13      	ldr	r3, [pc, #76]	; (8000370 <MX_SPI1_Init+0x70>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000326:	4b12      	ldr	r3, [pc, #72]	; (8000370 <MX_SPI1_Init+0x70>)
 8000328:	2200      	movs	r2, #0
 800032a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800032c:	4b10      	ldr	r3, [pc, #64]	; (8000370 <MX_SPI1_Init+0x70>)
 800032e:	2200      	movs	r2, #0
 8000330:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000332:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <MX_SPI1_Init+0x70>)
 8000334:	2200      	movs	r2, #0
 8000336:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000338:	4b0d      	ldr	r3, [pc, #52]	; (8000370 <MX_SPI1_Init+0x70>)
 800033a:	2200      	movs	r2, #0
 800033c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800033e:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <MX_SPI1_Init+0x70>)
 8000340:	2200      	movs	r2, #0
 8000342:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000344:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <MX_SPI1_Init+0x70>)
 8000346:	2200      	movs	r2, #0
 8000348:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800034a:	4b09      	ldr	r3, [pc, #36]	; (8000370 <MX_SPI1_Init+0x70>)
 800034c:	2207      	movs	r2, #7
 800034e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000350:	4b07      	ldr	r3, [pc, #28]	; (8000370 <MX_SPI1_Init+0x70>)
 8000352:	2200      	movs	r2, #0
 8000354:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000356:	4b06      	ldr	r3, [pc, #24]	; (8000370 <MX_SPI1_Init+0x70>)
 8000358:	2208      	movs	r2, #8
 800035a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800035c:	4804      	ldr	r0, [pc, #16]	; (8000370 <MX_SPI1_Init+0x70>)
 800035e:	f002 f9cb 	bl	80026f8 <HAL_SPI_Init>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 8000368:	f000 f80d 	bl	8000386 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000030 	.word	0x20000030
 8000374:	40013000 	.word	0x40013000

08000378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037c:	2001      	movs	r0, #1
 800037e:	f7ff fefd 	bl	800017c <LL_AHB2_GRP1_EnableClock>

}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}

08000386 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800038a:	b672      	cpsid	i
}
 800038c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800038e:	e7fe      	b.n	800038e <Error_Handler+0x8>

08000390 <LL_AHB2_GRP1_EnableClock>:
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800039c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800039e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4313      	orrs	r3, r2
 80003a6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80003a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4013      	ands	r3, r2
 80003b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003b4:	68fb      	ldr	r3, [r7, #12]
}
 80003b6:	bf00      	nop
 80003b8:	3714      	adds	r7, #20
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr

080003c2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80003c2:	b480      	push	{r7}
 80003c4:	b085      	sub	sp, #20
 80003c6:	af00      	add	r7, sp, #0
 80003c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80003ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80003d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4313      	orrs	r3, r2
 80003d8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80003da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4013      	ands	r3, r2
 80003e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003e6:	68fb      	ldr	r3, [r7, #12]
}
 80003e8:	bf00      	nop
 80003ea:	3714      	adds	r7, #20
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr

080003f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
	...

08000404 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040c:	f107 030c 	add.w	r3, r7, #12
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
 800041a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a0f      	ldr	r2, [pc, #60]	; (8000460 <HAL_SPI_MspInit+0x5c>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d117      	bne.n	8000456 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000426:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800042a:	f7ff ffca 	bl	80003c2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800042e:	2001      	movs	r0, #1
 8000430:	f7ff ffae 	bl	8000390 <LL_AHB2_GRP1_EnableClock>
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ADS_CS_Pin|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000434:	23f0      	movs	r3, #240	; 0xf0
 8000436:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000438:	2302      	movs	r3, #2
 800043a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000440:	2300      	movs	r3, #0
 8000442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000444:	2305      	movs	r3, #5
 8000446:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000448:	f107 030c 	add.w	r3, r7, #12
 800044c:	4619      	mov	r1, r3
 800044e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000452:	f000 fa25 	bl	80008a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000456:	bf00      	nop
 8000458:	3720      	adds	r7, #32
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40013000 	.word	0x40013000

08000464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000468:	e7fe      	b.n	8000468 <NMI_Handler+0x4>

0800046a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800046e:	e7fe      	b.n	800046e <HardFault_Handler+0x4>

08000470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000474:	e7fe      	b.n	8000474 <MemManage_Handler+0x4>

08000476 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800047a:	e7fe      	b.n	800047a <BusFault_Handler+0x4>

0800047c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000480:	e7fe      	b.n	8000480 <UsageFault_Handler+0x4>

08000482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr

08000490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr

0800049e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b0:	f000 f8e6 	bl	8000680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80004bc:	4b24      	ldr	r3, [pc, #144]	; (8000550 <SystemInit+0x98>)
 80004be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004c2:	4a23      	ldr	r2, [pc, #140]	; (8000550 <SystemInit+0x98>)
 80004c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80004cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80004d6:	f043 0301 	orr.w	r3, r3, #1
 80004da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80004dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004e0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80004e4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80004e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004f0:	4b18      	ldr	r3, [pc, #96]	; (8000554 <SystemInit+0x9c>)
 80004f2:	4013      	ands	r3, r2
 80004f4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80004f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80004fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000502:	f023 0305 	bic.w	r3, r3, #5
 8000506:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800050a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800050e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000512:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000516:	f023 0301 	bic.w	r3, r3, #1
 800051a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800051e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000522:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <SystemInit+0xa0>)
 8000524:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800052a:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <SystemInit+0xa0>)
 800052c:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800052e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000538:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800053c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800053e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000542:	2200      	movs	r2, #0
 8000544:	619a      	str	r2, [r3, #24]
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	e000ed00 	.word	0xe000ed00
 8000554:	faf6fefb 	.word	0xfaf6fefb
 8000558:	22041000 	.word	0x22041000

0800055c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800055c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800055e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000560:	3304      	adds	r3, #4

08000562 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000562:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000564:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000566:	d3f9      	bcc.n	800055c <CopyDataInit>
  bx lr
 8000568:	4770      	bx	lr

0800056a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800056a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800056c:	3004      	adds	r0, #4

0800056e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800056e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000570:	d3fb      	bcc.n	800056a <FillZerobss>
  bx lr
 8000572:	4770      	bx	lr

08000574 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000574:	480c      	ldr	r0, [pc, #48]	; (80005a8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000576:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000578:	f7ff ff9e 	bl	80004b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800057c:	480b      	ldr	r0, [pc, #44]	; (80005ac <LoopForever+0x8>)
 800057e:	490c      	ldr	r1, [pc, #48]	; (80005b0 <LoopForever+0xc>)
 8000580:	4a0c      	ldr	r2, [pc, #48]	; (80005b4 <LoopForever+0x10>)
 8000582:	2300      	movs	r3, #0
 8000584:	f7ff ffed 	bl	8000562 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000588:	480b      	ldr	r0, [pc, #44]	; (80005b8 <LoopForever+0x14>)
 800058a:	490c      	ldr	r1, [pc, #48]	; (80005bc <LoopForever+0x18>)
 800058c:	2300      	movs	r3, #0
 800058e:	f7ff ffee 	bl	800056e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000592:	480b      	ldr	r0, [pc, #44]	; (80005c0 <LoopForever+0x1c>)
 8000594:	490b      	ldr	r1, [pc, #44]	; (80005c4 <LoopForever+0x20>)
 8000596:	2300      	movs	r3, #0
 8000598:	f7ff ffe9 	bl	800056e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800059c:	f002 fc22 	bl	8002de4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80005a0:	f7ff fe1a 	bl	80001d8 <main>

080005a4 <LoopForever>:

LoopForever:
  b LoopForever
 80005a4:	e7fe      	b.n	80005a4 <LoopForever>
 80005a6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80005a8:	20010000 	.word	0x20010000
  INIT_DATA _sdata, _edata, _sidata
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000014 	.word	0x20000014
 80005b4:	08002f08 	.word	0x08002f08
  INIT_BSS _sbss, _ebss
 80005b8:	20000014 	.word	0x20000014
 80005bc:	2000009c 	.word	0x2000009c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80005c0:	20030000 	.word	0x20030000
 80005c4:	20030000 	.word	0x20030000

080005c8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005c8:	e7fe      	b.n	80005c8 <ADC1_IRQHandler>
	...

080005cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005d2:	2300      	movs	r3, #0
 80005d4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005d6:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <HAL_Init+0x3c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <HAL_Init+0x3c>)
 80005dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e2:	2003      	movs	r0, #3
 80005e4:	f000 f92a 	bl	800083c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005e8:	200f      	movs	r0, #15
 80005ea:	f000 f80f 	bl	800060c <HAL_InitTick>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d002      	beq.n	80005fa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80005f4:	2301      	movs	r3, #1
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	e001      	b.n	80005fe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005fa:	f7ff fefb 	bl	80003f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005fe:	79fb      	ldrb	r3, [r7, #7]
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	58004000 	.word	0x58004000

0800060c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000614:	2300      	movs	r3, #0
 8000616:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000618:	4b17      	ldr	r3, [pc, #92]	; (8000678 <HAL_InitTick+0x6c>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d024      	beq.n	800066a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000620:	f001 fb7e 	bl	8001d20 <HAL_RCC_GetHCLKFreq>
 8000624:	4602      	mov	r2, r0
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <HAL_InitTick+0x6c>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	4619      	mov	r1, r3
 800062c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000630:	fbb3 f3f1 	udiv	r3, r3, r1
 8000634:	fbb2 f3f3 	udiv	r3, r2, r3
 8000638:	4618      	mov	r0, r3
 800063a:	f000 f924 	bl	8000886 <HAL_SYSTICK_Config>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d10f      	bne.n	8000664 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b0f      	cmp	r3, #15
 8000648:	d809      	bhi.n	800065e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800064a:	2200      	movs	r2, #0
 800064c:	6879      	ldr	r1, [r7, #4]
 800064e:	f04f 30ff 	mov.w	r0, #4294967295
 8000652:	f000 f8fe 	bl	8000852 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000656:	4a09      	ldr	r2, [pc, #36]	; (800067c <HAL_InitTick+0x70>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	e007      	b.n	800066e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800065e:	2301      	movs	r3, #1
 8000660:	73fb      	strb	r3, [r7, #15]
 8000662:	e004      	b.n	800066e <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000664:	2301      	movs	r3, #1
 8000666:	73fb      	strb	r3, [r7, #15]
 8000668:	e001      	b.n	800066e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800066a:	2301      	movs	r3, #1
 800066c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800066e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000010 	.word	0x20000010
 800067c:	2000000c 	.word	0x2000000c

08000680 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <HAL_IncTick+0x20>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <HAL_IncTick+0x24>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4413      	add	r3, r2
 8000690:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <HAL_IncTick+0x24>)
 8000692:	6013      	str	r3, [r2, #0]
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	20000010 	.word	0x20000010
 80006a4:	20000098 	.word	0x20000098

080006a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  return uwTick;
 80006ac:	4b03      	ldr	r3, [pc, #12]	; (80006bc <HAL_GetTick+0x14>)
 80006ae:	681b      	ldr	r3, [r3, #0]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	20000098 	.word	0x20000098

080006c0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <HAL_GetTickPrio+0x14>)
 80006c6:	681b      	ldr	r3, [r3, #0]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	2000000c 	.word	0x2000000c

080006d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <__NVIC_SetPriorityGrouping+0x44>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ee:	68ba      	ldr	r2, [r7, #8]
 80006f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006f4:	4013      	ands	r3, r2
 80006f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000700:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800070a:	4a04      	ldr	r2, [pc, #16]	; (800071c <__NVIC_SetPriorityGrouping+0x44>)
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	60d3      	str	r3, [r2, #12]
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <__NVIC_GetPriorityGrouping+0x18>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	0a1b      	lsrs	r3, r3, #8
 800072a:	f003 0307 	and.w	r3, r3, #7
}
 800072e:	4618      	mov	r0, r3
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074c:	2b00      	cmp	r3, #0
 800074e:	db0a      	blt.n	8000766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	b2da      	uxtb	r2, r3
 8000754:	490c      	ldr	r1, [pc, #48]	; (8000788 <__NVIC_SetPriority+0x4c>)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	0112      	lsls	r2, r2, #4
 800075c:	b2d2      	uxtb	r2, r2
 800075e:	440b      	add	r3, r1
 8000760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000764:	e00a      	b.n	800077c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	b2da      	uxtb	r2, r3
 800076a:	4908      	ldr	r1, [pc, #32]	; (800078c <__NVIC_SetPriority+0x50>)
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	f003 030f 	and.w	r3, r3, #15
 8000772:	3b04      	subs	r3, #4
 8000774:	0112      	lsls	r2, r2, #4
 8000776:	b2d2      	uxtb	r2, r2
 8000778:	440b      	add	r3, r1
 800077a:	761a      	strb	r2, [r3, #24]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000e100 	.word	0xe000e100
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000790:	b480      	push	{r7}
 8000792:	b089      	sub	sp, #36	; 0x24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	f1c3 0307 	rsb	r3, r3, #7
 80007aa:	2b04      	cmp	r3, #4
 80007ac:	bf28      	it	cs
 80007ae:	2304      	movcs	r3, #4
 80007b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	3304      	adds	r3, #4
 80007b6:	2b06      	cmp	r3, #6
 80007b8:	d902      	bls.n	80007c0 <NVIC_EncodePriority+0x30>
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	3b03      	subs	r3, #3
 80007be:	e000      	b.n	80007c2 <NVIC_EncodePriority+0x32>
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c4:	f04f 32ff 	mov.w	r2, #4294967295
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	43da      	mvns	r2, r3
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	401a      	ands	r2, r3
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d8:	f04f 31ff 	mov.w	r1, #4294967295
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	fa01 f303 	lsl.w	r3, r1, r3
 80007e2:	43d9      	mvns	r1, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	4313      	orrs	r3, r2
         );
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3724      	adds	r7, #36	; 0x24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
	...

080007f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3b01      	subs	r3, #1
 8000804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000808:	d301      	bcc.n	800080e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800080a:	2301      	movs	r3, #1
 800080c:	e00f      	b.n	800082e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <SysTick_Config+0x40>)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000816:	210f      	movs	r1, #15
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	f7ff ff8e 	bl	800073c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <SysTick_Config+0x40>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000826:	4b04      	ldr	r3, [pc, #16]	; (8000838 <SysTick_Config+0x40>)
 8000828:	2207      	movs	r2, #7
 800082a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	e000e010 	.word	0xe000e010

0800083c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff ff47 	bl	80006d8 <__NVIC_SetPriorityGrouping>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b086      	sub	sp, #24
 8000856:	af00      	add	r7, sp, #0
 8000858:	4603      	mov	r3, r0
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
 800085e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000860:	f7ff ff5e 	bl	8000720 <__NVIC_GetPriorityGrouping>
 8000864:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	68b9      	ldr	r1, [r7, #8]
 800086a:	6978      	ldr	r0, [r7, #20]
 800086c:	f7ff ff90 	bl	8000790 <NVIC_EncodePriority>
 8000870:	4602      	mov	r2, r0
 8000872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000876:	4611      	mov	r1, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff5f 	bl	800073c <__NVIC_SetPriority>
}
 800087e:	bf00      	nop
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff ffb2 	bl	80007f8 <SysTick_Config>
 8000894:	4603      	mov	r3, r0
}
 8000896:	4618      	mov	r0, r3
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b087      	sub	sp, #28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ae:	e14c      	b.n	8000b4a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	2101      	movs	r1, #1
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	fa01 f303 	lsl.w	r3, r1, r3
 80008bc:	4013      	ands	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f000 813e 	beq.w	8000b44 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	f003 0303 	and.w	r3, r3, #3
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d005      	beq.n	80008e0 <HAL_GPIO_Init+0x40>
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	f003 0303 	and.w	r3, r3, #3
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d130      	bne.n	8000942 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	2203      	movs	r2, #3
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	43db      	mvns	r3, r3
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	4013      	ands	r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	68da      	ldr	r2, [r3, #12]
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	4313      	orrs	r3, r2
 8000908:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000916:	2201      	movs	r2, #1
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	43db      	mvns	r3, r3
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	4013      	ands	r3, r2
 8000924:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	091b      	lsrs	r3, r3, #4
 800092c:	f003 0201 	and.w	r2, r3, #1
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	4313      	orrs	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	f003 0303 	and.w	r3, r3, #3
 800094a:	2b03      	cmp	r3, #3
 800094c:	d017      	beq.n	800097e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	68db      	ldr	r3, [r3, #12]
 8000952:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	2203      	movs	r2, #3
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	43db      	mvns	r3, r3
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	4013      	ands	r3, r2
 8000964:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	689a      	ldr	r2, [r3, #8]
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	4313      	orrs	r3, r2
 8000976:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	f003 0303 	and.w	r3, r3, #3
 8000986:	2b02      	cmp	r3, #2
 8000988:	d123      	bne.n	80009d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	08da      	lsrs	r2, r3, #3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3208      	adds	r2, #8
 8000992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000996:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	220f      	movs	r2, #15
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43db      	mvns	r3, r3
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	4013      	ands	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	691a      	ldr	r2, [r3, #16]
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	f003 0307 	and.w	r3, r3, #7
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	08da      	lsrs	r2, r3, #3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3208      	adds	r2, #8
 80009cc:	6939      	ldr	r1, [r7, #16]
 80009ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	2203      	movs	r2, #3
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4013      	ands	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f003 0203 	and.w	r2, r3, #3
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	f000 8098 	beq.w	8000b44 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000a14:	4a54      	ldr	r2, [pc, #336]	; (8000b68 <HAL_GPIO_Init+0x2c8>)
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	089b      	lsrs	r3, r3, #2
 8000a1a:	3302      	adds	r3, #2
 8000a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	f003 0303 	and.w	r3, r3, #3
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	220f      	movs	r2, #15
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	43db      	mvns	r3, r3
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4013      	ands	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a3e:	d019      	beq.n	8000a74 <HAL_GPIO_Init+0x1d4>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a4a      	ldr	r2, [pc, #296]	; (8000b6c <HAL_GPIO_Init+0x2cc>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d013      	beq.n	8000a70 <HAL_GPIO_Init+0x1d0>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a49      	ldr	r2, [pc, #292]	; (8000b70 <HAL_GPIO_Init+0x2d0>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d00d      	beq.n	8000a6c <HAL_GPIO_Init+0x1cc>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a48      	ldr	r2, [pc, #288]	; (8000b74 <HAL_GPIO_Init+0x2d4>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d007      	beq.n	8000a68 <HAL_GPIO_Init+0x1c8>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a47      	ldr	r2, [pc, #284]	; (8000b78 <HAL_GPIO_Init+0x2d8>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d101      	bne.n	8000a64 <HAL_GPIO_Init+0x1c4>
 8000a60:	2304      	movs	r3, #4
 8000a62:	e008      	b.n	8000a76 <HAL_GPIO_Init+0x1d6>
 8000a64:	2307      	movs	r3, #7
 8000a66:	e006      	b.n	8000a76 <HAL_GPIO_Init+0x1d6>
 8000a68:	2303      	movs	r3, #3
 8000a6a:	e004      	b.n	8000a76 <HAL_GPIO_Init+0x1d6>
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	e002      	b.n	8000a76 <HAL_GPIO_Init+0x1d6>
 8000a70:	2301      	movs	r3, #1
 8000a72:	e000      	b.n	8000a76 <HAL_GPIO_Init+0x1d6>
 8000a74:	2300      	movs	r3, #0
 8000a76:	697a      	ldr	r2, [r7, #20]
 8000a78:	f002 0203 	and.w	r2, r2, #3
 8000a7c:	0092      	lsls	r2, r2, #2
 8000a7e:	4093      	lsls	r3, r2
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a86:	4938      	ldr	r1, [pc, #224]	; (8000b68 <HAL_GPIO_Init+0x2c8>)
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	089b      	lsrs	r3, r3, #2
 8000a8c:	3302      	adds	r3, #2
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a94:	4b39      	ldr	r3, [pc, #228]	; (8000b7c <HAL_GPIO_Init+0x2dc>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d003      	beq.n	8000ab8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ab8:	4a30      	ldr	r2, [pc, #192]	; (8000b7c <HAL_GPIO_Init+0x2dc>)
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000abe:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <HAL_GPIO_Init+0x2dc>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	4013      	ands	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ae2:	4a26      	ldr	r2, [pc, #152]	; (8000b7c <HAL_GPIO_Init+0x2dc>)
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ae8:	4b24      	ldr	r3, [pc, #144]	; (8000b7c <HAL_GPIO_Init+0x2dc>)
 8000aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	43db      	mvns	r3, r3
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4013      	ands	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d003      	beq.n	8000b0e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b0e:	4a1b      	ldr	r2, [pc, #108]	; (8000b7c <HAL_GPIO_Init+0x2dc>)
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <HAL_GPIO_Init+0x2dc>)
 8000b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	43db      	mvns	r3, r3
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b3c:	4a0f      	ldr	r2, [pc, #60]	; (8000b7c <HAL_GPIO_Init+0x2dc>)
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	3301      	adds	r3, #1
 8000b48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	fa22 f303 	lsr.w	r3, r2, r3
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	f47f aeab 	bne.w	80008b0 <HAL_GPIO_Init+0x10>
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	bf00      	nop
 8000b5e:	371c      	adds	r7, #28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	40010000 	.word	0x40010000
 8000b6c:	48000400 	.word	0x48000400
 8000b70:	48000800 	.word	0x48000800
 8000b74:	48000c00 	.word	0x48000c00
 8000b78:	48001000 	.word	0x48001000
 8000b7c:	58000800 	.word	0x58000800

08000b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	807b      	strh	r3, [r7, #2]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b90:	787b      	ldrb	r3, [r7, #1]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d003      	beq.n	8000b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b96:	887a      	ldrh	r2, [r7, #2]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b9c:	e002      	b.n	8000ba4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b9e:	887a      	ldrh	r2, [r7, #2]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	58000400 	.word	0x58000400

08000bd0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	58000400 	.word	0x58000400

08000bec <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000bfe:	d101      	bne.n	8000c04 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000c00:	2301      	movs	r3, #1
 8000c02:	e000      	b.n	8000c06 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c40:	6013      	str	r3, [r2, #0]
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000c5e:	d101      	bne.n	8000c64 <LL_RCC_HSE_IsReady+0x18>
 8000c60:	2301      	movs	r3, #1
 8000c62:	e000      	b.n	8000c66 <LL_RCC_HSE_IsReady+0x1a>
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ca0:	6013      	str	r3, [r2, #0]
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cbe:	d101      	bne.n	8000cc4 <LL_RCC_HSI_IsReady+0x18>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e000      	b.n	8000cc6 <LL_RCC_HSI_IsReady+0x1a>
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	061b      	lsls	r3, r3, #24
 8000ce6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cea:	4313      	orrs	r3, r2
 8000cec:	604b      	str	r3, [r1, #4]
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d2c:	f023 0301 	bic.w	r3, r3, #1
 8000d30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8000d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d101      	bne.n	8000d56 <LL_RCC_HSI48_IsReady+0x18>
 8000d52:	2301      	movs	r3, #1
 8000d54:	e000      	b.n	8000d58 <LL_RCC_HSI48_IsReady+0x1a>
 8000d56:	2300      	movs	r3, #0
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d94:	f023 0301 	bic.w	r3, r3, #1
 8000d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000db2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000db6:	f043 0304 	orr.w	r3, r3, #4
 8000dba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dd8:	f023 0304 	bic.w	r3, r3, #4
 8000ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d101      	bne.n	8000e02 <LL_RCC_LSE_IsReady+0x18>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e000      	b.n	8000e04 <LL_RCC_LSE_IsReady+0x1a>
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e40:	f023 0301 	bic.w	r3, r3, #1
 8000e44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8000e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d101      	bne.n	8000e6a <LL_RCC_LSI1_IsReady+0x18>
 8000e66:	2301      	movs	r3, #1
 8000e68:	e000      	b.n	8000e6c <LL_RCC_LSI1_IsReady+0x1a>
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e86:	f043 0304 	orr.w	r3, r3, #4
 8000e8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ea4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ea8:	f023 0304 	bic.w	r3, r3, #4
 8000eac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ec6:	f003 0308 	and.w	r3, r3, #8
 8000eca:	2b08      	cmp	r3, #8
 8000ecc:	d101      	bne.n	8000ed2 <LL_RCC_LSI2_IsReady+0x18>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e000      	b.n	8000ed4 <LL_RCC_LSI2_IsReady+0x1a>
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8000ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000efa:	4313      	orrs	r3, r2
 8000efc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f38:	f023 0301 	bic.w	r3, r3, #1
 8000f3c:	6013      	str	r3, [r2, #0]
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d101      	bne.n	8000f5e <LL_RCC_MSI_IsReady+0x16>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e000      	b.n	8000f60 <LL_RCC_MSI_IsReady+0x18>
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	600b      	str	r3, [r1, #0]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8000f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fa2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2bb0      	cmp	r3, #176	; 0xb0
 8000fa8:	d901      	bls.n	8000fae <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8000faa:	23b0      	movs	r3, #176	; 0xb0
 8000fac:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8000fae:	687b      	ldr	r3, [r7, #4]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	604b      	str	r3, [r1, #4]
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f023 0203 	bic.w	r2, r3, #3
 8000ff8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	608b      	str	r3, [r1, #8]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 030c 	and.w	r3, r3, #12
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800102e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001038:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4313      	orrs	r3, r2
 8001040:	608b      	str	r3, [r1, #8]
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800105a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800105e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001062:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4313      	orrs	r3, r2
 800106a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001086:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800108a:	f023 020f 	bic.w	r2, r3, #15
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	091b      	lsrs	r3, r3, #4
 8001092:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001096:	4313      	orrs	r3, r2
 8001098:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80010b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80010ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	608b      	str	r3, [r1, #8]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80010d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80010e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	608b      	str	r3, [r1, #8]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80010fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001118:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800113a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800113e:	6013      	str	r3, [r2, #0]
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800114e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001158:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800115c:	6013      	str	r3, [r2, #0]
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800116c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001176:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800117a:	d101      	bne.n	8001180 <LL_RCC_PLL_IsReady+0x18>
 800117c:	2301      	movs	r3, #1
 800117e:	e000      	b.n	8001182 <LL_RCC_PLL_IsReady+0x1a>
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	0a1b      	lsrs	r3, r3, #8
 8001198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80011aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80011c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80011da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	f003 0303 	and.w	r3, r3, #3
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80011f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001200:	d101      	bne.n	8001206 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800121a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001226:	d101      	bne.n	800122c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800123c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001240:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124c:	d101      	bne.n	8001252 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001270:	d101      	bne.n	8001276 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001290:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001294:	d101      	bne.n	800129a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b08d      	sub	sp, #52	; 0x34
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e37f      	b.n	80019ba <HAL_RCC_OscConfig+0x712>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0320 	and.w	r3, r3, #32
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 8092 	beq.w	80013ec <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012c8:	f7ff fea1 	bl	800100e <LL_RCC_GetSysClkSource>
 80012cc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012ce:	f7ff ff82 	bl	80011d6 <LL_RCC_PLL_GetMainSource>
 80012d2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80012d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d005      	beq.n	80012e6 <HAL_RCC_OscConfig+0x3e>
 80012da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012dc:	2b0c      	cmp	r3, #12
 80012de:	d14c      	bne.n	800137a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80012e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d149      	bne.n	800137a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012e6:	f7ff fe2f 	bl	8000f48 <LL_RCC_MSI_IsReady>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d005      	beq.n	80012fc <HAL_RCC_OscConfig+0x54>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69db      	ldr	r3, [r3, #28]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e35e      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001300:	f7ff fe47 	bl	8000f92 <LL_RCC_MSI_GetRange>
 8001304:	4603      	mov	r3, r0
 8001306:	429c      	cmp	r4, r3
 8001308:	d914      	bls.n	8001334 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130e:	4618      	mov	r0, r3
 8001310:	f000 fd1a 	bl	8001d48 <RCC_SetFlashLatencyFromMSIRange>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e34d      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fe21 	bl	8000f6a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fe45 	bl	8000fbc <LL_RCC_MSI_SetCalibTrimming>
 8001332:	e013      	b.n	800135c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fe16 	bl	8000f6a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a1b      	ldr	r3, [r3, #32]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fe3a 	bl	8000fbc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	4618      	mov	r0, r3
 800134e:	f000 fcfb 	bl	8001d48 <RCC_SetFlashLatencyFromMSIRange>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e32e      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800135c:	f000 fce0 	bl	8001d20 <HAL_RCC_GetHCLKFreq>
 8001360:	4603      	mov	r3, r0
 8001362:	4aa5      	ldr	r2, [pc, #660]	; (80015f8 <HAL_RCC_OscConfig+0x350>)
 8001364:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001366:	4ba5      	ldr	r3, [pc, #660]	; (80015fc <HAL_RCC_OscConfig+0x354>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f94e 	bl	800060c <HAL_InitTick>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d039      	beq.n	80013ea <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e31f      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d01e      	beq.n	80013c0 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001382:	f7ff fdc3 	bl	8000f0c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001386:	f7ff f98f 	bl	80006a8 <HAL_GetTick>
 800138a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800138e:	f7ff f98b 	bl	80006a8 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e30c      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() == 0U)
 80013a0:	f7ff fdd2 	bl	8000f48 <LL_RCC_MSI_IsReady>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f1      	beq.n	800138e <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fddb 	bl	8000f6a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fdff 	bl	8000fbc <LL_RCC_MSI_SetCalibTrimming>
 80013be:	e015      	b.n	80013ec <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013c0:	f7ff fdb3 	bl	8000f2a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013c4:	f7ff f970 	bl	80006a8 <HAL_GetTick>
 80013c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013cc:	f7ff f96c 	bl	80006a8 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e2ed      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() != 0U)
 80013de:	f7ff fdb3 	bl	8000f48 <LL_RCC_MSI_IsReady>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f1      	bne.n	80013cc <HAL_RCC_OscConfig+0x124>
 80013e8:	e000      	b.n	80013ec <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013ea:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d04e      	beq.n	8001496 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013f8:	f7ff fe09 	bl	800100e <LL_RCC_GetSysClkSource>
 80013fc:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013fe:	f7ff feea 	bl	80011d6 <LL_RCC_PLL_GetMainSource>
 8001402:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001404:	6a3b      	ldr	r3, [r7, #32]
 8001406:	2b08      	cmp	r3, #8
 8001408:	d005      	beq.n	8001416 <HAL_RCC_OscConfig+0x16e>
 800140a:	6a3b      	ldr	r3, [r7, #32]
 800140c:	2b0c      	cmp	r3, #12
 800140e:	d10d      	bne.n	800142c <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d10a      	bne.n	800142c <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001416:	f7ff fc19 	bl	8000c4c <LL_RCC_HSE_IsReady>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d039      	beq.n	8001494 <HAL_RCC_OscConfig+0x1ec>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d135      	bne.n	8001494 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e2c6      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001434:	d102      	bne.n	800143c <HAL_RCC_OscConfig+0x194>
 8001436:	f7ff fbeb 	bl	8000c10 <LL_RCC_HSE_Enable>
 800143a:	e001      	b.n	8001440 <HAL_RCC_OscConfig+0x198>
 800143c:	f7ff fbf7 	bl	8000c2e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d012      	beq.n	800146e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001448:	f7ff f92e 	bl	80006a8 <HAL_GetTick>
 800144c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001450:	f7ff f92a 	bl	80006a8 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b64      	cmp	r3, #100	; 0x64
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e2ab      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001462:	f7ff fbf3 	bl	8000c4c <LL_RCC_HSE_IsReady>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f1      	beq.n	8001450 <HAL_RCC_OscConfig+0x1a8>
 800146c:	e013      	b.n	8001496 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146e:	f7ff f91b 	bl	80006a8 <HAL_GetTick>
 8001472:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001476:	f7ff f917 	bl	80006a8 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b64      	cmp	r3, #100	; 0x64
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e298      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001488:	f7ff fbe0 	bl	8000c4c <LL_RCC_HSE_IsReady>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f1      	bne.n	8001476 <HAL_RCC_OscConfig+0x1ce>
 8001492:	e000      	b.n	8001496 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001494:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d051      	beq.n	8001546 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014a2:	f7ff fdb4 	bl	800100e <LL_RCC_GetSysClkSource>
 80014a6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014a8:	f7ff fe95 	bl	80011d6 <LL_RCC_PLL_GetMainSource>
 80014ac:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d005      	beq.n	80014c0 <HAL_RCC_OscConfig+0x218>
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	2b0c      	cmp	r3, #12
 80014b8:	d113      	bne.n	80014e2 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d110      	bne.n	80014e2 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014c0:	f7ff fbf4 	bl	8000cac <LL_RCC_HSI_IsReady>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d005      	beq.n	80014d6 <HAL_RCC_OscConfig+0x22e>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e271      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fbf8 	bl	8000cd0 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014e0:	e031      	b.n	8001546 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d019      	beq.n	800151e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ea:	f7ff fbc1 	bl	8000c70 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ee:	f7ff f8db 	bl	80006a8 <HAL_GetTick>
 80014f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f6:	f7ff f8d7 	bl	80006a8 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e258      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001508:	f7ff fbd0 	bl	8000cac <LL_RCC_HSI_IsReady>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f1      	beq.n	80014f6 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fbda 	bl	8000cd0 <LL_RCC_HSI_SetCalibTrimming>
 800151c:	e013      	b.n	8001546 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800151e:	f7ff fbb6 	bl	8000c8e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001522:	f7ff f8c1 	bl	80006a8 <HAL_GetTick>
 8001526:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152a:	f7ff f8bd 	bl	80006a8 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e23e      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() != 0U)
 800153c:	f7ff fbb6 	bl	8000cac <LL_RCC_HSI_IsReady>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f1      	bne.n	800152a <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d106      	bne.n	8001560 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 80a4 	beq.w	80016a8 <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d077      	beq.n	8001658 <HAL_RCC_OscConfig+0x3b0>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0310 	and.w	r3, r3, #16
 8001570:	2b00      	cmp	r3, #0
 8001572:	d04b      	beq.n	800160c <HAL_RCC_OscConfig+0x364>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001574:	f7ff fc6d 	bl	8000e52 <LL_RCC_LSI1_IsReady>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d113      	bne.n	80015a6 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800157e:	f7ff fc46 	bl	8000e0e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001582:	f7ff f891 	bl	80006a8 <HAL_GetTick>
 8001586:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800158a:	f7ff f88d 	bl	80006a8 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e20e      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800159c:	f7ff fc59 	bl	8000e52 <LL_RCC_LSI1_IsReady>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f1      	beq.n	800158a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80015a6:	f7ff fc66 	bl	8000e76 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015aa:	f7ff f87d 	bl	80006a8 <HAL_GetTick>
 80015ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80015b2:	f7ff f879 	bl	80006a8 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e1fa      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80015c4:	f7ff fc79 	bl	8000eba <LL_RCC_LSI2_IsReady>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f1      	beq.n	80015b2 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fc83 	bl	8000ede <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80015d8:	f7ff fc2a 	bl	8000e30 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015dc:	f7ff f864 	bl	80006a8 <HAL_GetTick>
 80015e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80015e2:	e00d      	b.n	8001600 <HAL_RCC_OscConfig+0x358>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80015e4:	f7ff f860 	bl	80006a8 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d906      	bls.n	8001600 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e1e1      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
 80015f6:	bf00      	nop
 80015f8:	20000008 	.word	0x20000008
 80015fc:	2000000c 	.word	0x2000000c
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001600:	f7ff fc27 	bl	8000e52 <LL_RCC_LSI1_IsReady>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1ec      	bne.n	80015e4 <HAL_RCC_OscConfig+0x33c>
 800160a:	e04d      	b.n	80016a8 <HAL_RCC_OscConfig+0x400>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800160c:	f7ff fbff 	bl	8000e0e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001610:	f7ff f84a 	bl	80006a8 <HAL_GetTick>
 8001614:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x382>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001618:	f7ff f846 	bl	80006a8 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e1c7      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800162a:	f7ff fc12 	bl	8000e52 <LL_RCC_LSI1_IsReady>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f1      	beq.n	8001618 <HAL_RCC_OscConfig+0x370>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001634:	f7ff fc30 	bl	8000e98 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x3a4>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800163a:	f7ff f835 	bl	80006a8 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b03      	cmp	r3, #3
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e1b6      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800164c:	f7ff fc35 	bl	8000eba <LL_RCC_LSI2_IsReady>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f1      	bne.n	800163a <HAL_RCC_OscConfig+0x392>
 8001656:	e027      	b.n	80016a8 <HAL_RCC_OscConfig+0x400>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001658:	f7ff fc1e 	bl	8000e98 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165c:	f7ff f824 	bl	80006a8 <HAL_GetTick>
 8001660:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x3ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001664:	f7ff f820 	bl	80006a8 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b03      	cmp	r3, #3
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e1a1      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001676:	f7ff fc20 	bl	8000eba <LL_RCC_LSI2_IsReady>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1f1      	bne.n	8001664 <HAL_RCC_OscConfig+0x3bc>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001680:	f7ff fbd6 	bl	8000e30 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001684:	f7ff f810 	bl	80006a8 <HAL_GetTick>
 8001688:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x3f6>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800168c:	f7ff f80c 	bl	80006a8 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e18d      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800169e:	f7ff fbd8 	bl	8000e52 <LL_RCC_LSI1_IsReady>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f1      	bne.n	800168c <HAL_RCC_OscConfig+0x3e4>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d05b      	beq.n	800176c <HAL_RCC_OscConfig+0x4c4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b4:	4ba7      	ldr	r3, [pc, #668]	; (8001954 <HAL_RCC_OscConfig+0x6ac>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d114      	bne.n	80016ea <HAL_RCC_OscConfig+0x442>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80016c0:	f7ff fa76 	bl	8000bb0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c4:	f7fe fff0 	bl	80006a8 <HAL_GetTick>
 80016c8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x436>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016cc:	f7fe ffec 	bl	80006a8 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e16d      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016de:	4b9d      	ldr	r3, [pc, #628]	; (8001954 <HAL_RCC_OscConfig+0x6ac>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x424>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d102      	bne.n	80016f8 <HAL_RCC_OscConfig+0x450>
 80016f2:	f7ff fb36 	bl	8000d62 <LL_RCC_LSE_Enable>
 80016f6:	e00c      	b.n	8001712 <HAL_RCC_OscConfig+0x46a>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2b05      	cmp	r3, #5
 80016fe:	d104      	bne.n	800170a <HAL_RCC_OscConfig+0x462>
 8001700:	f7ff fb51 	bl	8000da6 <LL_RCC_LSE_EnableBypass>
 8001704:	f7ff fb2d 	bl	8000d62 <LL_RCC_LSE_Enable>
 8001708:	e003      	b.n	8001712 <HAL_RCC_OscConfig+0x46a>
 800170a:	f7ff fb3b 	bl	8000d84 <LL_RCC_LSE_Disable>
 800170e:	f7ff fb5b 	bl	8000dc8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d014      	beq.n	8001744 <HAL_RCC_OscConfig+0x49c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171a:	f7fe ffc5 	bl	80006a8 <HAL_GetTick>
 800171e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001720:	e00a      	b.n	8001738 <HAL_RCC_OscConfig+0x490>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001722:	f7fe ffc1 	bl	80006a8 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001730:	4293      	cmp	r3, r2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e140      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001738:	f7ff fb57 	bl	8000dea <LL_RCC_LSE_IsReady>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0ef      	beq.n	8001722 <HAL_RCC_OscConfig+0x47a>
 8001742:	e013      	b.n	800176c <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001744:	f7fe ffb0 	bl	80006a8 <HAL_GetTick>
 8001748:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800174a:	e00a      	b.n	8001762 <HAL_RCC_OscConfig+0x4ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174c:	f7fe ffac 	bl	80006a8 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	f241 3288 	movw	r2, #5000	; 0x1388
 800175a:	4293      	cmp	r3, r2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e12b      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001762:	f7ff fb42 	bl	8000dea <LL_RCC_LSE_IsReady>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1ef      	bne.n	800174c <HAL_RCC_OscConfig+0x4a4>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001774:	2b00      	cmp	r3, #0
 8001776:	d02c      	beq.n	80017d2 <HAL_RCC_OscConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	2b00      	cmp	r3, #0
 800177e:	d014      	beq.n	80017aa <HAL_RCC_OscConfig+0x502>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001780:	f7ff fabb 	bl	8000cfa <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001784:	f7fe ff90 	bl	80006a8 <HAL_GetTick>
 8001788:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x4f6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800178c:	f7fe ff8c 	bl	80006a8 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e10d      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800179e:	f7ff face 	bl	8000d3e <LL_RCC_HSI48_IsReady>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f1      	beq.n	800178c <HAL_RCC_OscConfig+0x4e4>
 80017a8:	e013      	b.n	80017d2 <HAL_RCC_OscConfig+0x52a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017aa:	f7ff fab7 	bl	8000d1c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ae:	f7fe ff7b 	bl	80006a8 <HAL_GetTick>
 80017b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x520>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017b6:	f7fe ff77 	bl	80006a8 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e0f8      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80017c8:	f7ff fab9 	bl	8000d3e <LL_RCC_HSI48_IsReady>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f1      	bne.n	80017b6 <HAL_RCC_OscConfig+0x50e>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 80ee 	beq.w	80019b8 <HAL_RCC_OscConfig+0x710>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017dc:	f7ff fc17 	bl	800100e <LL_RCC_GetSysClkSource>
 80017e0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80017e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	f040 80b4 	bne.w	800195c <HAL_RCC_OscConfig+0x6b4>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f003 0203 	and.w	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	429a      	cmp	r2, r3
 8001800:	d123      	bne.n	800184a <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180c:	429a      	cmp	r2, r3
 800180e:	d11c      	bne.n	800184a <HAL_RCC_OscConfig+0x5a2>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	0a1b      	lsrs	r3, r3, #8
 8001814:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800181c:	429a      	cmp	r2, r3
 800181e:	d114      	bne.n	800184a <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800182a:	429a      	cmp	r2, r3
 800182c:	d10d      	bne.n	800184a <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001838:	429a      	cmp	r2, r3
 800183a:	d106      	bne.n	800184a <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001846:	429a      	cmp	r2, r3
 8001848:	d05d      	beq.n	8001906 <HAL_RCC_OscConfig+0x65e>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	2b0c      	cmp	r3, #12
 800184e:	d058      	beq.n	8001902 <HAL_RCC_OscConfig+0x65a>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_RCC_OscConfig+0x5ba>

          {
            return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e0ab      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001862:	f7ff fc72 	bl	800114a <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001866:	f7fe ff1f 	bl	80006a8 <HAL_GetTick>
 800186a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x5d8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186e:	f7fe ff1b 	bl	80006a8 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x5d8>
              {
                return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e09c      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1ef      	bne.n	800186e <HAL_RCC_OscConfig+0x5c6>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800188e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	4b30      	ldr	r3, [pc, #192]	; (8001958 <HAL_RCC_OscConfig+0x6b0>)
 8001896:	4013      	ands	r3, r2
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018a0:	4311      	orrs	r1, r2
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018a6:	0212      	lsls	r2, r2, #8
 80018a8:	4311      	orrs	r1, r2
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018ae:	4311      	orrs	r1, r2
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018b4:	4311      	orrs	r1, r2
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018ba:	430a      	orrs	r2, r1
 80018bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018c0:	4313      	orrs	r3, r2
 80018c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018c4:	f7ff fc32 	bl	800112c <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d6:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018d8:	f7fe fee6 	bl	80006a8 <HAL_GetTick>
 80018dc:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x64a>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e0:	f7fe fee2 	bl	80006a8 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x64a>
              {
                return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e063      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0ef      	beq.n	80018e0 <HAL_RCC_OscConfig+0x638>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001900:	e05a      	b.n	80019b8 <HAL_RCC_OscConfig+0x710>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e059      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d151      	bne.n	80019b8 <HAL_RCC_OscConfig+0x710>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001914:	f7ff fc0a 	bl	800112c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001926:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001928:	f7fe febe 	bl	80006a8 <HAL_GetTick>
 800192c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x69a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001930:	f7fe feba 	bl	80006a8 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x69a>
            {
              return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e03b      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0ef      	beq.n	8001930 <HAL_RCC_OscConfig+0x688>
 8001950:	e032      	b.n	80019b8 <HAL_RCC_OscConfig+0x710>
 8001952:	bf00      	nop
 8001954:	58000400 	.word	0x58000400
 8001958:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	2b0c      	cmp	r3, #12
 8001960:	d028      	beq.n	80019b4 <HAL_RCC_OscConfig+0x70c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001962:	f7ff fbf2 	bl	800114a <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001970:	f023 0303 	bic.w	r3, r3, #3
 8001974:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8001976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001980:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001988:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198a:	f7fe fe8d 	bl	80006a8 <HAL_GetTick>
 800198e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x6fc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001992:	f7fe fe89 	bl	80006a8 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x6fc>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e00a      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1ef      	bne.n	8001992 <HAL_RCC_OscConfig+0x6ea>
 80019b2:	e001      	b.n	80019b8 <HAL_RCC_OscConfig+0x710>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <HAL_RCC_OscConfig+0x712>
      }
    }
  }
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3734      	adds	r7, #52	; 0x34
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd90      	pop	{r4, r7, pc}
 80019c2:	bf00      	nop

080019c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e12d      	b.n	8001c34 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019d8:	4b98      	ldr	r3, [pc, #608]	; (8001c3c <HAL_RCC_ClockConfig+0x278>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d91b      	bls.n	8001a1e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e6:	4b95      	ldr	r3, [pc, #596]	; (8001c3c <HAL_RCC_ClockConfig+0x278>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 0207 	bic.w	r2, r3, #7
 80019ee:	4993      	ldr	r1, [pc, #588]	; (8001c3c <HAL_RCC_ClockConfig+0x278>)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019f6:	f7fe fe57 	bl	80006a8 <HAL_GetTick>
 80019fa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80019fe:	f7fe fe53 	bl	80006a8 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e111      	b.n	8001c34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a10:	4b8a      	ldr	r3, [pc, #552]	; (8001c3c <HAL_RCC_ClockConfig+0x278>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d1ef      	bne.n	80019fe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d016      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff faf9 	bl	8001026 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a34:	f7fe fe38 	bl	80006a8 <HAL_GetTick>
 8001a38:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a3c:	f7fe fe34 	bl	80006a8 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e0f2      	b.n	8001c34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001a4e:	f7ff fbce 	bl	80011ee <LL_RCC_IsActiveFlag_HPRE>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0f1      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0320 	and.w	r3, r3, #32
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d016      	beq.n	8001a92 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff faf0 	bl	800104e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a6e:	f7fe fe1b 	bl	80006a8 <HAL_GetTick>
 8001a72:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a76:	f7fe fe17 	bl	80006a8 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e0d5      	b.n	8001c34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001a88:	f7ff fbc3 	bl	8001212 <LL_RCC_IsActiveFlag_C2HPRE>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f1      	beq.n	8001a76 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d016      	beq.n	8001acc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fae9 	bl	800107a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001aa8:	f7fe fdfe 	bl	80006a8 <HAL_GetTick>
 8001aac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ab0:	f7fe fdfa 	bl	80006a8 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e0b8      	b.n	8001c34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001ac2:	f7ff fbb9 	bl	8001238 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f1      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d016      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fae3 	bl	80010a8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ae2:	f7fe fde1 	bl	80006a8 <HAL_GetTick>
 8001ae6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001aea:	f7fe fddd 	bl	80006a8 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e09b      	b.n	8001c34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001afc:	f7ff fbaf 	bl	800125e <LL_RCC_IsActiveFlag_PPRE1>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f1      	beq.n	8001aea <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d017      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fad9 	bl	80010d0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001b1e:	f7fe fdc3 	bl	80006a8 <HAL_GetTick>
 8001b22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b26:	f7fe fdbf 	bl	80006a8 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e07d      	b.n	8001c34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001b38:	f7ff fba3 	bl	8001282 <LL_RCC_IsActiveFlag_PPRE2>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f1      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d043      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d106      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001b56:	f7ff f879 	bl	8000c4c <LL_RCC_HSE_IsReady>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d11e      	bne.n	8001b9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e067      	b.n	8001c34 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d106      	bne.n	8001b7a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001b6c:	f7ff fafc 	bl	8001168 <LL_RCC_PLL_IsReady>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d113      	bne.n	8001b9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e05c      	b.n	8001c34 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d106      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001b82:	f7ff f9e1 	bl	8000f48 <LL_RCC_MSI_IsReady>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d108      	bne.n	8001b9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e051      	b.n	8001c34 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001b90:	f7ff f88c 	bl	8000cac <LL_RCC_HSI_IsReady>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e04a      	b.n	8001c34 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fa1f 	bl	8000fe6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ba8:	f7fe fd7e 	bl	80006a8 <HAL_GetTick>
 8001bac:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bae:	e00a      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb0:	f7fe fd7a 	bl	80006a8 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e036      	b.n	8001c34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc6:	f7ff fa22 	bl	800100e <LL_RCC_GetSysClkSource>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d1ec      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd6:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <HAL_RCC_ClockConfig+0x278>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d21b      	bcs.n	8001c1c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be4:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <HAL_RCC_ClockConfig+0x278>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f023 0207 	bic.w	r2, r3, #7
 8001bec:	4913      	ldr	r1, [pc, #76]	; (8001c3c <HAL_RCC_ClockConfig+0x278>)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bf4:	f7fe fd58 	bl	80006a8 <HAL_GetTick>
 8001bf8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001bfc:	f7fe fd54 	bl	80006a8 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e012      	b.n	8001c34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_RCC_ClockConfig+0x278>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d1ef      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001c1c:	f000 f880 	bl	8001d20 <HAL_RCC_GetHCLKFreq>
 8001c20:	4603      	mov	r3, r0
 8001c22:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_RCC_ClockConfig+0x27c>)
 8001c24:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8001c26:	f7fe fd4b 	bl	80006c0 <HAL_GetTickPrio>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fced 	bl	800060c <HAL_InitTick>
 8001c32:	4603      	mov	r3, r0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	58004000 	.word	0x58004000
 8001c40:	20000008 	.word	0x20000008

08001c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c4a:	f7ff f9e0 	bl	800100e <LL_RCC_GetSysClkSource>
 8001c4e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10a      	bne.n	8001c6c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001c56:	f7ff f99c 	bl	8000f92 <LL_RCC_MSI_GetRange>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	091b      	lsrs	r3, r3, #4
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	4a2b      	ldr	r2, [pc, #172]	; (8001d10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	e04b      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d102      	bne.n	8001c78 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c72:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	e045      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d10a      	bne.n	8001c94 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001c7e:	f7fe ffb5 	bl	8000bec <LL_RCC_HSE_IsEnabledDiv2>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d102      	bne.n	8001c8e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001c88:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	e03a      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001c8e:	4b23      	ldr	r3, [pc, #140]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xd8>)
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	e037      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001c94:	f7ff fa9f 	bl	80011d6 <LL_RCC_PLL_GetMainSource>
 8001c98:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d003      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x64>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d003      	beq.n	8001cae <HAL_RCC_GetSysClockFreq+0x6a>
 8001ca6:	e00d      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001ca8:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001caa:	60bb      	str	r3, [r7, #8]
        break;
 8001cac:	e015      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001cae:	f7fe ff9d 	bl	8000bec <LL_RCC_HSE_IsEnabledDiv2>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d102      	bne.n	8001cbe <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001cb8:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001cba:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001cbc:	e00d      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8001cbe:	4b17      	ldr	r3, [pc, #92]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xd8>)
 8001cc0:	60bb      	str	r3, [r7, #8]
        break;
 8001cc2:	e00a      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001cc4:	f7ff f965 	bl	8000f92 <LL_RCC_MSI_GetRange>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	091b      	lsrs	r3, r3, #4
 8001ccc:	f003 030f 	and.w	r3, r3, #15
 8001cd0:	4a0f      	ldr	r2, [pc, #60]	; (8001d10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd6:	60bb      	str	r3, [r7, #8]
        break;
 8001cd8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8001cda:	f7ff fa57 	bl	800118c <LL_RCC_PLL_GetN>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	fb03 f402 	mul.w	r4, r3, r2
 8001ce6:	f7ff fa6a 	bl	80011be <LL_RCC_PLL_GetDivider>
 8001cea:	4603      	mov	r3, r0
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	3301      	adds	r3, #1
 8001cf0:	fbb4 f4f3 	udiv	r4, r4, r3
 8001cf4:	f7ff fa57 	bl	80011a6 <LL_RCC_PLL_GetR>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	0f5b      	lsrs	r3, r3, #29
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	fbb4 f3f3 	udiv	r3, r4, r3
 8001d02:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8001d04:	68fb      	ldr	r3, [r7, #12]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd90      	pop	{r4, r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	08002ec0 	.word	0x08002ec0
 8001d14:	00f42400 	.word	0x00f42400
 8001d18:	003d0900 	.word	0x003d0900
 8001d1c:	007a1200 	.word	0x007a1200

08001d20 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d20:	b598      	push	{r3, r4, r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001d24:	f7ff ff8e 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8001d28:	4604      	mov	r4, r0
 8001d2a:	f7ff f9e5 	bl	80010f8 <LL_RCC_GetAHBPrescaler>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	091b      	lsrs	r3, r3, #4
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	4a03      	ldr	r2, [pc, #12]	; (8001d44 <HAL_RCC_GetHCLKFreq+0x24>)
 8001d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	bd98      	pop	{r3, r4, r7, pc}
 8001d44:	08002e80 	.word	0x08002e80

08001d48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2bb0      	cmp	r3, #176	; 0xb0
 8001d54:	d903      	bls.n	8001d5e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	e007      	b.n	8001d6e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	4a11      	ldr	r2, [pc, #68]	; (8001dac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001d6e:	f7ff f9cf 	bl	8001110 <LL_RCC_GetAHB4Prescaler>
 8001d72:	4603      	mov	r3, r0
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	4a0d      	ldr	r2, [pc, #52]	; (8001db0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8001d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d86:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8001d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d90:	0c9c      	lsrs	r4, r3, #18
 8001d92:	f7fe ff1d 	bl	8000bd0 <HAL_PWREx_GetVoltageRange>
 8001d96:	4603      	mov	r3, r0
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	f000 f80c 	bl	8001db8 <RCC_SetFlashLatency>
 8001da0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd90      	pop	{r4, r7, pc}
 8001daa:	bf00      	nop
 8001dac:	08002ec0 	.word	0x08002ec0
 8001db0:	08002e80 	.word	0x08002e80
 8001db4:	431bde83 	.word	0x431bde83

08001db8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b093      	sub	sp, #76	; 0x4c
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001dc2:	4b37      	ldr	r3, [pc, #220]	; (8001ea0 <RCC_SetFlashLatency+0xe8>)
 8001dc4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001dc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8001dce:	4a35      	ldr	r2, [pc, #212]	; (8001ea4 <RCC_SetFlashLatency+0xec>)
 8001dd0:	f107 031c 	add.w	r3, r7, #28
 8001dd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001dda:	4b33      	ldr	r3, [pc, #204]	; (8001ea8 <RCC_SetFlashLatency+0xf0>)
 8001ddc:	f107 040c 	add.w	r4, r7, #12
 8001de0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001de2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001de6:	2300      	movs	r3, #0
 8001de8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001df0:	d11a      	bne.n	8001e28 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	643b      	str	r3, [r7, #64]	; 0x40
 8001df6:	e013      	b.n	8001e20 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	3348      	adds	r3, #72	; 0x48
 8001dfe:	443b      	add	r3, r7
 8001e00:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d807      	bhi.n	8001e1a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	3348      	adds	r3, #72	; 0x48
 8001e10:	443b      	add	r3, r7
 8001e12:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001e16:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8001e18:	e020      	b.n	8001e5c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	643b      	str	r3, [r7, #64]	; 0x40
 8001e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d9e8      	bls.n	8001df8 <RCC_SetFlashLatency+0x40>
 8001e26:	e019      	b.n	8001e5c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001e28:	2300      	movs	r3, #0
 8001e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e2c:	e013      	b.n	8001e56 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	3348      	adds	r3, #72	; 0x48
 8001e34:	443b      	add	r3, r7
 8001e36:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d807      	bhi.n	8001e50 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	3348      	adds	r3, #72	; 0x48
 8001e46:	443b      	add	r3, r7
 8001e48:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001e4c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8001e4e:	e005      	b.n	8001e5c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e52:	3301      	adds	r3, #1
 8001e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d9e8      	bls.n	8001e2e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8001e5c:	4b13      	ldr	r3, [pc, #76]	; (8001eac <RCC_SetFlashLatency+0xf4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f023 0207 	bic.w	r2, r3, #7
 8001e64:	4911      	ldr	r1, [pc, #68]	; (8001eac <RCC_SetFlashLatency+0xf4>)
 8001e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001e6c:	f7fe fc1c 	bl	80006a8 <HAL_GetTick>
 8001e70:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001e72:	e008      	b.n	8001e86 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001e74:	f7fe fc18 	bl	80006a8 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e007      	b.n	8001e96 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <RCC_SetFlashLatency+0xf4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d1ef      	bne.n	8001e74 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	374c      	adds	r7, #76	; 0x4c
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd90      	pop	{r4, r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	08002e54 	.word	0x08002e54
 8001ea4:	08002e64 	.word	0x08002e64
 8001ea8:	08002e70 	.word	0x08002e70
 8001eac:	58004000 	.word	0x58004000

08001eb0 <LL_RCC_LSE_IsEnabled>:
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8001eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <LL_RCC_LSE_IsEnabled+0x18>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <LL_RCC_LSE_IsEnabled+0x1a>
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <LL_RCC_LSE_IsReady>:
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d101      	bne.n	8001eec <LL_RCC_LSE_IsReady+0x18>
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e000      	b.n	8001eee <LL_RCC_LSE_IsReady+0x1a>
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_RCC_SetRFWKPClockSource>:
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8001f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_RCC_SetSMPSClockSource>:
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	f023 0203 	bic.w	r2, r3, #3
 8001f36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_RCC_SetSMPSPrescaler>:
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8001f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_RCC_SetUSARTClockSource>:
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8001f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f84:	f023 0203 	bic.w	r2, r3, #3
 8001f88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <LL_RCC_SetLPUARTClockSource>:
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <LL_RCC_SetI2CClockSource>:
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8001fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	091b      	lsrs	r3, r3, #4
 8001fe0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001ff0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <LL_RCC_SetLPTIMClockSource>:
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800200e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002012:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	0c1b      	lsrs	r3, r3, #16
 800201a:	041b      	lsls	r3, r3, #16
 800201c:	43db      	mvns	r3, r3
 800201e:	401a      	ands	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	041b      	lsls	r3, r3, #16
 8002024:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002028:	4313      	orrs	r3, r2
 800202a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <LL_RCC_SetSAIClockSource>:
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800204e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4313      	orrs	r3, r2
 8002056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <LL_RCC_SetRNGClockSource>:
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800206e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002076:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800207a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4313      	orrs	r3, r2
 8002082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_RCC_SetCLK48ClockSource>:
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800209a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <LL_RCC_SetUSBClockSource>:
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff ffe3 	bl	8002092 <LL_RCC_SetCLK48ClockSource>
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <LL_RCC_SetADCClockSource>:
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80020dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80020e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <LL_RCC_SetRTCClockSource>:
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002110:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002114:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4313      	orrs	r3, r2
 800211c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <LL_RCC_GetRTCClockSource>:
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002138:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <LL_RCC_ForceBackupDomainReset>:
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800214a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002152:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800216c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002174:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <LL_RCC_PLLSAI1_Enable>:
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800218e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002198:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800219c:	6013      	str	r3, [r2, #0]
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LL_RCC_PLLSAI1_Disable>:
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80021ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80021ba:	6013      	str	r3, [r2, #0]
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <LL_RCC_PLLSAI1_IsReady>:
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80021ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021d8:	d101      	bne.n	80021de <LL_RCC_PLLSAI1_IsReady+0x18>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b088      	sub	sp, #32
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80021f2:	2300      	movs	r3, #0
 80021f4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80021f6:	2300      	movs	r3, #0
 80021f8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002202:	2b00      	cmp	r3, #0
 8002204:	d034      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800220e:	d021      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002210:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002214:	d81b      	bhi.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002216:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800221a:	d01d      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800221c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002220:	d815      	bhi.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00b      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002226:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800222a:	d110      	bne.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800222c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800223c:	e00d      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3304      	adds	r3, #4
 8002242:	4618      	mov	r0, r3
 8002244:	f000 f947 	bl	80024d6 <RCCEx_PLLSAI1_ConfigNP>
 8002248:	4603      	mov	r3, r0
 800224a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800224c:	e005      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	77fb      	strb	r3, [r7, #31]
        break;
 8002252:	e002      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002254:	bf00      	nop
 8002256:	e000      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800225a:	7ffb      	ldrb	r3, [r7, #31]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d105      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff fee8 	bl	800203a <LL_RCC_SetSAIClockSource>
 800226a:	e001      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800226c:	7ffb      	ldrb	r3, [r7, #31]
 800226e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002278:	2b00      	cmp	r3, #0
 800227a:	d046      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800227c:	f7ff ff56 	bl	800212c <LL_RCC_GetRTCClockSource>
 8002280:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	429a      	cmp	r2, r3
 800228a:	d03c      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800228c:	f7fe fc90 	bl	8000bb0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d105      	bne.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff ff30 	bl	8002100 <LL_RCC_SetRTCClockSource>
 80022a0:	e02e      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80022a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022aa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80022ac:	f7ff ff4b 	bl	8002146 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80022b0:	f7ff ff5a 	bl	8002168 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	4313      	orrs	r3, r2
 80022c0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80022c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80022cc:	f7ff fdf0 	bl	8001eb0 <LL_RCC_LSE_IsEnabled>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d114      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022d6:	f7fe f9e7 	bl	80006a8 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80022dc:	e00b      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022de:	f7fe f9e3 	bl	80006a8 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d902      	bls.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	77fb      	strb	r3, [r7, #31]
              break;
 80022f4:	e004      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80022f6:	f7ff fded 	bl	8001ed4 <LL_RCC_LSE_IsReady>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d1ee      	bne.n	80022de <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002300:	7ffb      	ldrb	r3, [r7, #31]
 8002302:	77bb      	strb	r3, [r7, #30]
 8002304:	e001      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002306:	7ffb      	ldrb	r3, [r7, #31]
 8002308:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d004      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fe2a 	bl	8001f74 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d004      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fe35 	bl	8001fa0 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0310 	and.w	r3, r3, #16
 800233e:	2b00      	cmp	r3, #0
 8002340:	d004      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fe5d 	bl	8002006 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0320 	and.w	r3, r3, #32
 8002354:	2b00      	cmp	r3, #0
 8002356:	d004      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fe52 	bl	8002006 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	2b00      	cmp	r3, #0
 800236c:	d004      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fe2a 	bl	8001fcc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d004      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fe1f 	bl	8001fcc <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002396:	2b00      	cmp	r3, #0
 8002398:	d022      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fe8d 	bl	80020be <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023ac:	d107      	bne.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80023ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023bc:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023c6:	d10b      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3304      	adds	r3, #4
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 f8dd 	bl	800258c <RCCEx_PLLSAI1_ConfigNQ>
 80023d2:	4603      	mov	r3, r0
 80023d4:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80023d6:	7ffb      	ldrb	r3, [r7, #31]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 80023dc:	7ffb      	ldrb	r3, [r7, #31]
 80023de:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d02b      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f4:	d008      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023fe:	d003      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002404:	2b00      	cmp	r3, #0
 8002406:	d105      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fe2a 	bl	8002066 <LL_RCC_SetRNGClockSource>
 8002412:	e00a      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	2000      	movs	r0, #0
 8002420:	f7ff fe21 	bl	8002066 <LL_RCC_SetRNGClockSource>
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f7ff fe34 	bl	8002092 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002432:	d107      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800243e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002442:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800244c:	2b00      	cmp	r3, #0
 800244e:	d022      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fe3d 	bl	80020d4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002462:	d107      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800246e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002472:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002478:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800247c:	d10b      	bne.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3304      	adds	r3, #4
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f8dd 	bl	8002642 <RCCEx_PLLSAI1_ConfigNR>
 8002488:	4603      	mov	r3, r0
 800248a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800248c:	7ffb      	ldrb	r3, [r7, #31]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8002492:	7ffb      	ldrb	r3, [r7, #31]
 8002494:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d004      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fd26 	bl	8001ef8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d009      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fd45 	bl	8001f4c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fd2c 	bl	8001f24 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80024cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3720      	adds	r7, #32
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b084      	sub	sp, #16
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80024e2:	f7ff fe61 	bl	80021a8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80024e6:	f7fe f8df 	bl	80006a8 <HAL_GetTick>
 80024ea:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80024ec:	e009      	b.n	8002502 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024ee:	f7fe f8db 	bl	80006a8 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d902      	bls.n	8002502 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002500:	e004      	b.n	800250c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002502:	f7ff fe60 	bl	80021c6 <LL_RCC_PLLSAI1_IsReady>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1f0      	bne.n	80024ee <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d137      	bne.n	8002582 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	021b      	lsls	r3, r3, #8
 8002522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002526:	4313      	orrs	r3, r2
 8002528:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800252a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800253c:	4313      	orrs	r3, r2
 800253e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002540:	f7ff fe23 	bl	800218a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002544:	f7fe f8b0 	bl	80006a8 <HAL_GetTick>
 8002548:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800254a:	e009      	b.n	8002560 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800254c:	f7fe f8ac 	bl	80006a8 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d902      	bls.n	8002560 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	73fb      	strb	r3, [r7, #15]
        break;
 800255e:	e004      	b.n	800256a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002560:	f7ff fe31 	bl	80021c6 <LL_RCC_PLLSAI1_IsReady>
 8002564:	4603      	mov	r3, r0
 8002566:	2b01      	cmp	r3, #1
 8002568:	d1f0      	bne.n	800254c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d108      	bne.n	8002582 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002574:	691a      	ldr	r2, [r3, #16]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800257e:	4313      	orrs	r3, r2
 8002580:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002582:	7bfb      	ldrb	r3, [r7, #15]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002598:	f7ff fe06 	bl	80021a8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800259c:	f7fe f884 	bl	80006a8 <HAL_GetTick>
 80025a0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80025a2:	e009      	b.n	80025b8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025a4:	f7fe f880 	bl	80006a8 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d902      	bls.n	80025b8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	73fb      	strb	r3, [r7, #15]
      break;
 80025b6:	e004      	b.n	80025c2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80025b8:	f7ff fe05 	bl	80021c6 <LL_RCC_PLLSAI1_IsReady>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d137      	bne.n	8002638 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80025c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025dc:	4313      	orrs	r3, r2
 80025de:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80025e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025f2:	4313      	orrs	r3, r2
 80025f4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80025f6:	f7ff fdc8 	bl	800218a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025fa:	f7fe f855 	bl	80006a8 <HAL_GetTick>
 80025fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002600:	e009      	b.n	8002616 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002602:	f7fe f851 	bl	80006a8 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d902      	bls.n	8002616 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	73fb      	strb	r3, [r7, #15]
        break;
 8002614:	e004      	b.n	8002620 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002616:	f7ff fdd6 	bl	80021c6 <LL_RCC_PLLSAI1_IsReady>
 800261a:	4603      	mov	r3, r0
 800261c:	2b01      	cmp	r3, #1
 800261e:	d1f0      	bne.n	8002602 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d108      	bne.n	8002638 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002634:	4313      	orrs	r3, r2
 8002636:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002638:	7bfb      	ldrb	r3, [r7, #15]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b084      	sub	sp, #16
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800264e:	f7ff fdab 	bl	80021a8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002652:	f7fe f829 	bl	80006a8 <HAL_GetTick>
 8002656:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002658:	e009      	b.n	800266e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800265a:	f7fe f825 	bl	80006a8 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d902      	bls.n	800266e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	73fb      	strb	r3, [r7, #15]
      break;
 800266c:	e004      	b.n	8002678 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800266e:	f7ff fdaa 	bl	80021c6 <LL_RCC_PLLSAI1_IsReady>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f0      	bne.n	800265a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d137      	bne.n	80026ee <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800267e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	021b      	lsls	r3, r3, #8
 800268e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002692:	4313      	orrs	r3, r2
 8002694:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026a8:	4313      	orrs	r3, r2
 80026aa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80026ac:	f7ff fd6d 	bl	800218a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b0:	f7fd fffa 	bl	80006a8 <HAL_GetTick>
 80026b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80026b6:	e009      	b.n	80026cc <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026b8:	f7fd fff6 	bl	80006a8 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d902      	bls.n	80026cc <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	73fb      	strb	r3, [r7, #15]
        break;
 80026ca:	e004      	b.n	80026d6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80026cc:	f7ff fd7b 	bl	80021c6 <LL_RCC_PLLSAI1_IsReady>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d1f0      	bne.n	80026b8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d108      	bne.n	80026ee <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80026dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e0:	691a      	ldr	r2, [r3, #16]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026ea:	4313      	orrs	r3, r2
 80026ec:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e095      	b.n	8002836 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	2b00      	cmp	r3, #0
 8002710:	d108      	bne.n	8002724 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800271a:	d009      	beq.n	8002730 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	61da      	str	r2, [r3, #28]
 8002722:	e005      	b.n	8002730 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fd fe5a 	bl	8000404 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002766:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002770:	d902      	bls.n	8002778 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	e002      	b.n	800277e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800277c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002786:	d007      	beq.n	8002798 <HAL_SPI_Init+0xa0>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002790:	d002      	beq.n	8002798 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	431a      	orrs	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027da:	ea42 0103 	orr.w	r1, r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	0c1b      	lsrs	r3, r3, #16
 80027f4:	f003 0204 	and.w	r2, r3, #4
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	f003 0310 	and.w	r3, r3, #16
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002814:	ea42 0103 	orr.w	r1, r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b088      	sub	sp, #32
 8002842:	af00      	add	r7, sp, #0
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	603b      	str	r3, [r7, #0]
 800284a:	4613      	mov	r3, r2
 800284c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_SPI_Transmit+0x22>
 800285c:	2302      	movs	r3, #2
 800285e:	e158      	b.n	8002b12 <HAL_SPI_Transmit+0x2d4>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002868:	f7fd ff1e 	bl	80006a8 <HAL_GetTick>
 800286c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b01      	cmp	r3, #1
 800287c:	d002      	beq.n	8002884 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800287e:	2302      	movs	r3, #2
 8002880:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002882:	e13d      	b.n	8002b00 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <HAL_SPI_Transmit+0x52>
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d102      	bne.n	8002896 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002894:	e134      	b.n	8002b00 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2203      	movs	r2, #3
 800289a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	88fa      	ldrh	r2, [r7, #6]
 80028ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	88fa      	ldrh	r2, [r7, #6]
 80028b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028e0:	d10f      	bne.n	8002902 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002900:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290c:	2b40      	cmp	r3, #64	; 0x40
 800290e:	d007      	beq.n	8002920 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800291e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002928:	d94b      	bls.n	80029c2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <HAL_SPI_Transmit+0xfa>
 8002932:	8afb      	ldrh	r3, [r7, #22]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d13e      	bne.n	80029b6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293c:	881a      	ldrh	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002948:	1c9a      	adds	r2, r3, #2
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800295c:	e02b      	b.n	80029b6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b02      	cmp	r3, #2
 800296a:	d112      	bne.n	8002992 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002970:	881a      	ldrh	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297c:	1c9a      	adds	r2, r3, #2
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002986:	b29b      	uxth	r3, r3
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002990:	e011      	b.n	80029b6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002992:	f7fd fe89 	bl	80006a8 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d803      	bhi.n	80029aa <HAL_SPI_Transmit+0x16c>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a8:	d102      	bne.n	80029b0 <HAL_SPI_Transmit+0x172>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d102      	bne.n	80029b6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029b4:	e0a4      	b.n	8002b00 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1ce      	bne.n	800295e <HAL_SPI_Transmit+0x120>
 80029c0:	e07c      	b.n	8002abc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_SPI_Transmit+0x192>
 80029ca:	8afb      	ldrh	r3, [r7, #22]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d170      	bne.n	8002ab2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d912      	bls.n	8002a00 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029de:	881a      	ldrh	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	1c9a      	adds	r2, r3, #2
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b02      	subs	r3, #2
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029fe:	e058      	b.n	8002ab2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	330c      	adds	r3, #12
 8002a0a:	7812      	ldrb	r2, [r2, #0]
 8002a0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002a26:	e044      	b.n	8002ab2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d12b      	bne.n	8002a8e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d912      	bls.n	8002a66 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a44:	881a      	ldrh	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a50:	1c9a      	adds	r2, r3, #2
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3b02      	subs	r3, #2
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a64:	e025      	b.n	8002ab2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	330c      	adds	r3, #12
 8002a70:	7812      	ldrb	r2, [r2, #0]
 8002a72:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a78:	1c5a      	adds	r2, r3, #1
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a8c:	e011      	b.n	8002ab2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a8e:	f7fd fe0b 	bl	80006a8 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d803      	bhi.n	8002aa6 <HAL_SPI_Transmit+0x268>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa4:	d102      	bne.n	8002aac <HAL_SPI_Transmit+0x26e>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d102      	bne.n	8002ab2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ab0:	e026      	b.n	8002b00 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1b5      	bne.n	8002a28 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	6839      	ldr	r1, [r7, #0]
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 f949 	bl	8002d58 <SPI_EndRxTxTransaction>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10a      	bne.n	8002af0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ada:	2300      	movs	r3, #0
 8002adc:	613b      	str	r3, [r7, #16]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	77fb      	strb	r3, [r7, #31]
 8002afc:	e000      	b.n	8002b00 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002afe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002b10:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3720      	adds	r7, #32
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	603b      	str	r3, [r7, #0]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b2c:	f7fd fdbc 	bl	80006a8 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b34:	1a9b      	subs	r3, r3, r2
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	4413      	add	r3, r2
 8002b3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b3c:	f7fd fdb4 	bl	80006a8 <HAL_GetTick>
 8002b40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b42:	4b39      	ldr	r3, [pc, #228]	; (8002c28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	015b      	lsls	r3, r3, #5
 8002b48:	0d1b      	lsrs	r3, r3, #20
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	fb02 f303 	mul.w	r3, r2, r3
 8002b50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b52:	e054      	b.n	8002bfe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5a:	d050      	beq.n	8002bfe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b5c:	f7fd fda4 	bl	80006a8 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	69fa      	ldr	r2, [r7, #28]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d902      	bls.n	8002b72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d13d      	bne.n	8002bee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b8a:	d111      	bne.n	8002bb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b94:	d004      	beq.n	8002ba0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9e:	d107      	bne.n	8002bb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb8:	d10f      	bne.n	8002bda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e017      	b.n	8002c1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	4013      	ands	r3, r2
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	bf0c      	ite	eq
 8002c0e:	2301      	moveq	r3, #1
 8002c10:	2300      	movne	r3, #0
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	461a      	mov	r2, r3
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d19b      	bne.n	8002b54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3720      	adds	r7, #32
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000008 	.word	0x20000008

08002c2c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08a      	sub	sp, #40	; 0x28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002c3e:	f7fd fd33 	bl	80006a8 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c46:	1a9b      	subs	r3, r3, r2
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002c4e:	f7fd fd2b 	bl	80006a8 <HAL_GetTick>
 8002c52:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	330c      	adds	r3, #12
 8002c5a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002c5c:	4b3d      	ldr	r3, [pc, #244]	; (8002d54 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	00da      	lsls	r2, r3, #3
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	0d1b      	lsrs	r3, r3, #20
 8002c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002c74:	e060      	b.n	8002d38 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002c7c:	d107      	bne.n	8002c8e <SPI_WaitFifoStateUntilTimeout+0x62>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d104      	bne.n	8002c8e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002c8c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c94:	d050      	beq.n	8002d38 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c96:	f7fd fd07 	bl	80006a8 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d902      	bls.n	8002cac <SPI_WaitFifoStateUntilTimeout+0x80>
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d13d      	bne.n	8002d28 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cc4:	d111      	bne.n	8002cea <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cce:	d004      	beq.n	8002cda <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd8:	d107      	bne.n	8002cea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ce8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cf2:	d10f      	bne.n	8002d14 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d12:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e010      	b.n	8002d4a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	4013      	ands	r3, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d196      	bne.n	8002c76 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3728      	adds	r7, #40	; 0x28
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000008 	.word	0x20000008

08002d58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af02      	add	r7, sp, #8
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f7ff ff5b 	bl	8002c2c <SPI_WaitFifoStateUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d007      	beq.n	8002d8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d80:	f043 0220 	orr.w	r2, r3, #32
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e027      	b.n	8002ddc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2200      	movs	r2, #0
 8002d94:	2180      	movs	r1, #128	; 0x80
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f7ff fec0 	bl	8002b1c <SPI_WaitFlagStateUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d007      	beq.n	8002db2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da6:	f043 0220 	orr.w	r2, r3, #32
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e014      	b.n	8002ddc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f7ff ff34 	bl	8002c2c <SPI_WaitFifoStateUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d007      	beq.n	8002dda <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dce:	f043 0220 	orr.w	r2, r3, #32
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e000      	b.n	8002ddc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <__libc_init_array>:
 8002de4:	b570      	push	{r4, r5, r6, lr}
 8002de6:	4d0d      	ldr	r5, [pc, #52]	; (8002e1c <__libc_init_array+0x38>)
 8002de8:	4c0d      	ldr	r4, [pc, #52]	; (8002e20 <__libc_init_array+0x3c>)
 8002dea:	1b64      	subs	r4, r4, r5
 8002dec:	10a4      	asrs	r4, r4, #2
 8002dee:	2600      	movs	r6, #0
 8002df0:	42a6      	cmp	r6, r4
 8002df2:	d109      	bne.n	8002e08 <__libc_init_array+0x24>
 8002df4:	4d0b      	ldr	r5, [pc, #44]	; (8002e24 <__libc_init_array+0x40>)
 8002df6:	4c0c      	ldr	r4, [pc, #48]	; (8002e28 <__libc_init_array+0x44>)
 8002df8:	f000 f820 	bl	8002e3c <_init>
 8002dfc:	1b64      	subs	r4, r4, r5
 8002dfe:	10a4      	asrs	r4, r4, #2
 8002e00:	2600      	movs	r6, #0
 8002e02:	42a6      	cmp	r6, r4
 8002e04:	d105      	bne.n	8002e12 <__libc_init_array+0x2e>
 8002e06:	bd70      	pop	{r4, r5, r6, pc}
 8002e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e0c:	4798      	blx	r3
 8002e0e:	3601      	adds	r6, #1
 8002e10:	e7ee      	b.n	8002df0 <__libc_init_array+0xc>
 8002e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e16:	4798      	blx	r3
 8002e18:	3601      	adds	r6, #1
 8002e1a:	e7f2      	b.n	8002e02 <__libc_init_array+0x1e>
 8002e1c:	08002f00 	.word	0x08002f00
 8002e20:	08002f00 	.word	0x08002f00
 8002e24:	08002f00 	.word	0x08002f00
 8002e28:	08002f04 	.word	0x08002f04

08002e2c <memset>:
 8002e2c:	4402      	add	r2, r0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d100      	bne.n	8002e36 <memset+0xa>
 8002e34:	4770      	bx	lr
 8002e36:	f803 1b01 	strb.w	r1, [r3], #1
 8002e3a:	e7f9      	b.n	8002e30 <memset+0x4>

08002e3c <_init>:
 8002e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e3e:	bf00      	nop
 8002e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e42:	bc08      	pop	{r3}
 8002e44:	469e      	mov	lr, r3
 8002e46:	4770      	bx	lr

08002e48 <_fini>:
 8002e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4a:	bf00      	nop
 8002e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e4e:	bc08      	pop	{r3}
 8002e50:	469e      	mov	lr, r3
 8002e52:	4770      	bx	lr
